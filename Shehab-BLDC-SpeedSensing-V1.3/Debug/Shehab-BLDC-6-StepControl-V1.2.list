
Shehab-BLDC-6-StepControl-V1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004730  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08004840  08004840  00005840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004864  08004864  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004864  08004864  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004864  08004864  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004864  08004864  00005864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004868  08004868  00005868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800486c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  2000000c  08004878  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08004878  000061fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a485  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef2  00000000  00000000  000104ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  000123b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f6  00000000  00000000  00012f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001757d  00000000  00000000  00013846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d288  00000000  00000000  0002adc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008995c  00000000  00000000  0003804b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c19a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030c0  00000000  00000000  000c19ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000c4aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004828 	.word	0x08004828

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08004828 	.word	0x08004828

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_frsub>:
 80007bc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80007c0:	e002      	b.n	80007c8 <__addsf3>
 80007c2:	bf00      	nop

080007c4 <__aeabi_fsub>:
 80007c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080007c8 <__addsf3>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	bf1f      	itttt	ne
 80007cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007d0:	ea92 0f03 	teqne	r2, r3
 80007d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007dc:	d06a      	beq.n	80008b4 <__addsf3+0xec>
 80007de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007e6:	bfc1      	itttt	gt
 80007e8:	18d2      	addgt	r2, r2, r3
 80007ea:	4041      	eorgt	r1, r0
 80007ec:	4048      	eorgt	r0, r1
 80007ee:	4041      	eorgt	r1, r0
 80007f0:	bfb8      	it	lt
 80007f2:	425b      	neglt	r3, r3
 80007f4:	2b19      	cmp	r3, #25
 80007f6:	bf88      	it	hi
 80007f8:	4770      	bxhi	lr
 80007fa:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80007fe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000802:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000806:	bf18      	it	ne
 8000808:	4240      	negne	r0, r0
 800080a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800080e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000812:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4249      	negne	r1, r1
 800081a:	ea92 0f03 	teq	r2, r3
 800081e:	d03f      	beq.n	80008a0 <__addsf3+0xd8>
 8000820:	f1a2 0201 	sub.w	r2, r2, #1
 8000824:	fa41 fc03 	asr.w	ip, r1, r3
 8000828:	eb10 000c 	adds.w	r0, r0, ip
 800082c:	f1c3 0320 	rsb	r3, r3, #32
 8000830:	fa01 f103 	lsl.w	r1, r1, r3
 8000834:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000838:	d502      	bpl.n	8000840 <__addsf3+0x78>
 800083a:	4249      	negs	r1, r1
 800083c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000840:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000844:	d313      	bcc.n	800086e <__addsf3+0xa6>
 8000846:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800084a:	d306      	bcc.n	800085a <__addsf3+0x92>
 800084c:	0840      	lsrs	r0, r0, #1
 800084e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000852:	f102 0201 	add.w	r2, r2, #1
 8000856:	2afe      	cmp	r2, #254	@ 0xfe
 8000858:	d251      	bcs.n	80008fe <__addsf3+0x136>
 800085a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800085e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000862:	bf08      	it	eq
 8000864:	f020 0001 	biceq.w	r0, r0, #1
 8000868:	ea40 0003 	orr.w	r0, r0, r3
 800086c:	4770      	bx	lr
 800086e:	0049      	lsls	r1, r1, #1
 8000870:	eb40 0000 	adc.w	r0, r0, r0
 8000874:	3a01      	subs	r2, #1
 8000876:	bf28      	it	cs
 8000878:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800087c:	d2ed      	bcs.n	800085a <__addsf3+0x92>
 800087e:	fab0 fc80 	clz	ip, r0
 8000882:	f1ac 0c08 	sub.w	ip, ip, #8
 8000886:	ebb2 020c 	subs.w	r2, r2, ip
 800088a:	fa00 f00c 	lsl.w	r0, r0, ip
 800088e:	bfaa      	itet	ge
 8000890:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000894:	4252      	neglt	r2, r2
 8000896:	4318      	orrge	r0, r3
 8000898:	bfbc      	itt	lt
 800089a:	40d0      	lsrlt	r0, r2
 800089c:	4318      	orrlt	r0, r3
 800089e:	4770      	bx	lr
 80008a0:	f092 0f00 	teq	r2, #0
 80008a4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80008a8:	bf06      	itte	eq
 80008aa:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80008ae:	3201      	addeq	r2, #1
 80008b0:	3b01      	subne	r3, #1
 80008b2:	e7b5      	b.n	8000820 <__addsf3+0x58>
 80008b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008bc:	bf18      	it	ne
 80008be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008c2:	d021      	beq.n	8000908 <__addsf3+0x140>
 80008c4:	ea92 0f03 	teq	r2, r3
 80008c8:	d004      	beq.n	80008d4 <__addsf3+0x10c>
 80008ca:	f092 0f00 	teq	r2, #0
 80008ce:	bf08      	it	eq
 80008d0:	4608      	moveq	r0, r1
 80008d2:	4770      	bx	lr
 80008d4:	ea90 0f01 	teq	r0, r1
 80008d8:	bf1c      	itt	ne
 80008da:	2000      	movne	r0, #0
 80008dc:	4770      	bxne	lr
 80008de:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80008e2:	d104      	bne.n	80008ee <__addsf3+0x126>
 80008e4:	0040      	lsls	r0, r0, #1
 80008e6:	bf28      	it	cs
 80008e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80008ec:	4770      	bx	lr
 80008ee:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80008f2:	bf3c      	itt	cc
 80008f4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80008f8:	4770      	bxcc	lr
 80008fa:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80008fe:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000902:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000906:	4770      	bx	lr
 8000908:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800090c:	bf16      	itet	ne
 800090e:	4608      	movne	r0, r1
 8000910:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000914:	4601      	movne	r1, r0
 8000916:	0242      	lsls	r2, r0, #9
 8000918:	bf06      	itte	eq
 800091a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800091e:	ea90 0f01 	teqeq	r0, r1
 8000922:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000926:	4770      	bx	lr

08000928 <__aeabi_ui2f>:
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e004      	b.n	8000938 <__aeabi_i2f+0x8>
 800092e:	bf00      	nop

08000930 <__aeabi_i2f>:
 8000930:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000934:	bf48      	it	mi
 8000936:	4240      	negmi	r0, r0
 8000938:	ea5f 0c00 	movs.w	ip, r0
 800093c:	bf08      	it	eq
 800093e:	4770      	bxeq	lr
 8000940:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000944:	4601      	mov	r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	e01c      	b.n	8000986 <__aeabi_l2f+0x2a>

0800094c <__aeabi_ul2f>:
 800094c:	ea50 0201 	orrs.w	r2, r0, r1
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	e00a      	b.n	8000970 <__aeabi_l2f+0x14>
 800095a:	bf00      	nop

0800095c <__aeabi_l2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000968:	d502      	bpl.n	8000970 <__aeabi_l2f+0x14>
 800096a:	4240      	negs	r0, r0
 800096c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000970:	ea5f 0c01 	movs.w	ip, r1
 8000974:	bf02      	ittt	eq
 8000976:	4684      	moveq	ip, r0
 8000978:	4601      	moveq	r1, r0
 800097a:	2000      	moveq	r0, #0
 800097c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000980:	bf08      	it	eq
 8000982:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000986:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800098a:	fabc f28c 	clz	r2, ip
 800098e:	3a08      	subs	r2, #8
 8000990:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000994:	db10      	blt.n	80009b8 <__aeabi_l2f+0x5c>
 8000996:	fa01 fc02 	lsl.w	ip, r1, r2
 800099a:	4463      	add	r3, ip
 800099c:	fa00 fc02 	lsl.w	ip, r0, r2
 80009a0:	f1c2 0220 	rsb	r2, r2, #32
 80009a4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	eb43 0002 	adc.w	r0, r3, r2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f102 0220 	add.w	r2, r2, #32
 80009bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009c0:	f1c2 0220 	rsb	r2, r2, #32
 80009c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009c8:	fa21 f202 	lsr.w	r2, r1, r2
 80009cc:	eb43 0002 	adc.w	r0, r3, r2
 80009d0:	bf08      	it	eq
 80009d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009d6:	4770      	bx	lr

080009d8 <__aeabi_fmul>:
 80009d8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009e0:	bf1e      	ittt	ne
 80009e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009e6:	ea92 0f0c 	teqne	r2, ip
 80009ea:	ea93 0f0c 	teqne	r3, ip
 80009ee:	d06f      	beq.n	8000ad0 <__aeabi_fmul+0xf8>
 80009f0:	441a      	add	r2, r3
 80009f2:	ea80 0c01 	eor.w	ip, r0, r1
 80009f6:	0240      	lsls	r0, r0, #9
 80009f8:	bf18      	it	ne
 80009fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009fe:	d01e      	beq.n	8000a3e <__aeabi_fmul+0x66>
 8000a00:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000a04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000a14:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000a18:	bf3e      	ittt	cc
 8000a1a:	0049      	lslcc	r1, r1, #1
 8000a1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	ea40 0001 	orr.w	r0, r0, r1
 8000a26:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000a2a:	2afd      	cmp	r2, #253	@ 0xfd
 8000a2c:	d81d      	bhi.n	8000a6a <__aeabi_fmul+0x92>
 8000a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000a32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a36:	bf08      	it	eq
 8000a38:	f020 0001 	biceq.w	r0, r0, #1
 8000a3c:	4770      	bx	lr
 8000a3e:	f090 0f00 	teq	r0, #0
 8000a42:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a46:	bf08      	it	eq
 8000a48:	0249      	lsleq	r1, r1, #9
 8000a4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a52:	3a7f      	subs	r2, #127	@ 0x7f
 8000a54:	bfc2      	ittt	gt
 8000a56:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a5e:	4770      	bxgt	lr
 8000a60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	dc5d      	bgt.n	8000b28 <__aeabi_fmul+0x150>
 8000a6c:	f112 0f19 	cmn.w	r2, #25
 8000a70:	bfdc      	itt	le
 8000a72:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000a76:	4770      	bxle	lr
 8000a78:	f1c2 0200 	rsb	r2, r2, #0
 8000a7c:	0041      	lsls	r1, r0, #1
 8000a7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a82:	f1c2 0220 	rsb	r2, r2, #32
 8000a86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a8e:	f140 0000 	adc.w	r0, r0, #0
 8000a92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a96:	bf08      	it	eq
 8000a98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a9c:	4770      	bx	lr
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fmul+0xce>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fmul+0xe6>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e78f      	b.n	80009f0 <__aeabi_fmul+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	bf18      	it	ne
 8000ada:	ea93 0f0c 	teqne	r3, ip
 8000ade:	d00a      	beq.n	8000af6 <__aeabi_fmul+0x11e>
 8000ae0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ae4:	bf18      	it	ne
 8000ae6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000aea:	d1d8      	bne.n	8000a9e <__aeabi_fmul+0xc6>
 8000aec:	ea80 0001 	eor.w	r0, r0, r1
 8000af0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000af4:	4770      	bx	lr
 8000af6:	f090 0f00 	teq	r0, #0
 8000afa:	bf17      	itett	ne
 8000afc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000b00:	4608      	moveq	r0, r1
 8000b02:	f091 0f00 	teqne	r1, #0
 8000b06:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000b0a:	d014      	beq.n	8000b36 <__aeabi_fmul+0x15e>
 8000b0c:	ea92 0f0c 	teq	r2, ip
 8000b10:	d101      	bne.n	8000b16 <__aeabi_fmul+0x13e>
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	d10f      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b16:	ea93 0f0c 	teq	r3, ip
 8000b1a:	d103      	bne.n	8000b24 <__aeabi_fmul+0x14c>
 8000b1c:	024b      	lsls	r3, r1, #9
 8000b1e:	bf18      	it	ne
 8000b20:	4608      	movne	r0, r1
 8000b22:	d108      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b24:	ea80 0001 	eor.w	r0, r0, r1
 8000b28:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b3a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_fdiv>:
 8000b40:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b48:	bf1e      	ittt	ne
 8000b4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b4e:	ea92 0f0c 	teqne	r2, ip
 8000b52:	ea93 0f0c 	teqne	r3, ip
 8000b56:	d069      	beq.n	8000c2c <__aeabi_fdiv+0xec>
 8000b58:	eba2 0203 	sub.w	r2, r2, r3
 8000b5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b60:	0249      	lsls	r1, r1, #9
 8000b62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b66:	d037      	beq.n	8000bd8 <__aeabi_fdiv+0x98>
 8000b68:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b74:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	bf38      	it	cc
 8000b7c:	005b      	lslcc	r3, r3, #1
 8000b7e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000b82:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000b86:	428b      	cmp	r3, r1
 8000b88:	bf24      	itt	cs
 8000b8a:	1a5b      	subcs	r3, r3, r1
 8000b8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b94:	bf24      	itt	cs
 8000b96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ba2:	bf24      	itt	cs
 8000ba4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ba8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bb0:	bf24      	itt	cs
 8000bb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	bf18      	it	ne
 8000bbe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bc2:	d1e0      	bne.n	8000b86 <__aeabi_fdiv+0x46>
 8000bc4:	2afd      	cmp	r2, #253	@ 0xfd
 8000bc6:	f63f af50 	bhi.w	8000a6a <__aeabi_fmul+0x92>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000bdc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000be0:	327f      	adds	r2, #127	@ 0x7f
 8000be2:	bfc2      	ittt	gt
 8000be4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000be8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bec:	4770      	bxgt	lr
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	3a01      	subs	r2, #1
 8000bf8:	e737      	b.n	8000a6a <__aeabi_fmul+0x92>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c02:	bf02      	ittt	eq
 8000c04:	0040      	lsleq	r0, r0, #1
 8000c06:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c0a:	3a01      	subeq	r2, #1
 8000c0c:	d0f9      	beq.n	8000c02 <__aeabi_fdiv+0xc2>
 8000c0e:	ea40 000c 	orr.w	r0, r0, ip
 8000c12:	f093 0f00 	teq	r3, #0
 8000c16:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c1a:	bf02      	ittt	eq
 8000c1c:	0049      	lsleq	r1, r1, #1
 8000c1e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c22:	3b01      	subeq	r3, #1
 8000c24:	d0f9      	beq.n	8000c1a <__aeabi_fdiv+0xda>
 8000c26:	ea41 010c 	orr.w	r1, r1, ip
 8000c2a:	e795      	b.n	8000b58 <__aeabi_fdiv+0x18>
 8000c2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c30:	ea92 0f0c 	teq	r2, ip
 8000c34:	d108      	bne.n	8000c48 <__aeabi_fdiv+0x108>
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	f47f af7d 	bne.w	8000b36 <__aeabi_fmul+0x15e>
 8000c3c:	ea93 0f0c 	teq	r3, ip
 8000c40:	f47f af70 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c44:	4608      	mov	r0, r1
 8000c46:	e776      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c48:	ea93 0f0c 	teq	r3, ip
 8000c4c:	d104      	bne.n	8000c58 <__aeabi_fdiv+0x118>
 8000c4e:	024b      	lsls	r3, r1, #9
 8000c50:	f43f af4c 	beq.w	8000aec <__aeabi_fmul+0x114>
 8000c54:	4608      	mov	r0, r1
 8000c56:	e76e      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c58:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c5c:	bf18      	it	ne
 8000c5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c62:	d1ca      	bne.n	8000bfa <__aeabi_fdiv+0xba>
 8000c64:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000c68:	f47f af5c 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c6c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000c70:	f47f af3c 	bne.w	8000aec <__aeabi_fmul+0x114>
 8000c74:	e75f      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c76:	bf00      	nop

08000c78 <SpeedCalculation>:
float 	FrequencyOfPulses=0; //The Frequency of the pulsese in Hz

void SpeedCalculation(float * SpeedRpm,float * SpeedKmh)/*Pass The Variable address
to get current speed in RPM and Kmh
*/
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
	FrequencyOfPulses=((float)PulsesPerInterval/(float)TimeInterval);//Calculate the pulses/second (Hz)
 8000c82:	4b29      	ldr	r3, [pc, #164]	@ (8000d28 <SpeedCalculation+0xb0>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fe4e 	bl	8000928 <__aeabi_ui2f>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	4927      	ldr	r1, [pc, #156]	@ (8000d2c <SpeedCalculation+0xb4>)
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff55 	bl	8000b40 <__aeabi_fdiv>
 8000c96:	4603      	mov	r3, r0
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b25      	ldr	r3, [pc, #148]	@ (8000d30 <SpeedCalculation+0xb8>)
 8000c9c:	601a      	str	r2, [r3, #0]

	(*SpeedRpm)=((60.0f *FrequencyOfPulses)/(float)PPR);//Calculate the speed in RPM
 8000c9e:	4b24      	ldr	r3, [pc, #144]	@ (8000d30 <SpeedCalculation+0xb8>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4924      	ldr	r1, [pc, #144]	@ (8000d34 <SpeedCalculation+0xbc>)
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fe97 	bl	80009d8 <__aeabi_fmul>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4922      	ldr	r1, [pc, #136]	@ (8000d38 <SpeedCalculation+0xc0>)
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff46 	bl	8000b40 <__aeabi_fdiv>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	601a      	str	r2, [r3, #0]
	(*SpeedKmh)=(((float)(2*PI*WheelRadius*(*SpeedRpm))/60.0f)*3.6);/*3.6 is for
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fcd3 	bl	800066c <__aeabi_f2d>
 8000cc6:	a314      	add	r3, pc, #80	@ (adr r3, 8000d18 <SpeedCalculation+0xa0>)
 8000cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ccc:	f7ff fa40 	bl	8000150 <__aeabi_dmul>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	4610      	mov	r0, r2
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f7ff fd20 	bl	800071c <__aeabi_d2f>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	4915      	ldr	r1, [pc, #84]	@ (8000d34 <SpeedCalculation+0xbc>)
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff2d 	bl	8000b40 <__aeabi_fdiv>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fcbf 	bl	800066c <__aeabi_f2d>
 8000cee:	a30c      	add	r3, pc, #48	@ (adr r3, 8000d20 <SpeedCalculation+0xa8>)
 8000cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf4:	f7ff fa2c 	bl	8000150 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f7ff fd0c 	bl	800071c <__aeabi_d2f>
 8000d04:	4602      	mov	r2, r0
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	601a      	str	r2, [r3, #0]
	( / 60*60 but its in denominator so it subtract to numerator) to convert from hour to hour
	and divide by 1000 from m to km
*/
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	f3af 8000 	nop.w
 8000d18:	a3d70a3e 	.word	0xa3d70a3e
 8000d1c:	4001171a 	.word	0x4001171a
 8000d20:	cccccccd 	.word	0xcccccccd
 8000d24:	400ccccc 	.word	0x400ccccc
 8000d28:	20000028 	.word	0x20000028
 8000d2c:	3ca3d70a 	.word	0x3ca3d70a
 8000d30:	2000002c 	.word	0x2000002c
 8000d34:	42700000 	.word	0x42700000
 8000d38:	431c0000 	.word	0x431c0000

08000d3c <Throttle_Init>:

extern ADC_HandleTypeDef hadc1;   // استخدم الـADC المعرّف في main.c

// Initialize ADC with DMA
void Throttle_Init(ADC_HandleTypeDef *hadc)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
    ThrottleADC = hadc;
 8000d44:	4a06      	ldr	r2, [pc, #24]	@ (8000d60 <Throttle_Init+0x24>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
    HAL_ADC_Start_DMA(ThrottleADC, (uint32_t *)&ADC_RawValue, 1);
 8000d4a:	4b05      	ldr	r3, [pc, #20]	@ (8000d60 <Throttle_Init+0x24>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4904      	ldr	r1, [pc, #16]	@ (8000d64 <Throttle_Init+0x28>)
 8000d52:	4618      	mov	r0, r3
 8000d54:	f001 f956 	bl	8002004 <HAL_ADC_Start_DMA>

}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000038 	.word	0x20000038
 8000d64:	20000030 	.word	0x20000030

08000d68 <Throttle_GetFilteredADC>:

//  Moving Average Filter
uint16_t Throttle_GetFilteredADC(uint16_t newValue)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	80fb      	strh	r3, [r7, #6]
    static uint16_t buffer[ADC_AVG_SAMPLES];
    static uint8_t index = 0;
    uint32_t sum = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]

    buffer[index++] = newValue;
 8000d76:	4b17      	ldr	r3, [pc, #92]	@ (8000dd4 <Throttle_GetFilteredADC+0x6c>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	1c5a      	adds	r2, r3, #1
 8000d7c:	b2d1      	uxtb	r1, r2
 8000d7e:	4a15      	ldr	r2, [pc, #84]	@ (8000dd4 <Throttle_GetFilteredADC+0x6c>)
 8000d80:	7011      	strb	r1, [r2, #0]
 8000d82:	4619      	mov	r1, r3
 8000d84:	4a14      	ldr	r2, [pc, #80]	@ (8000dd8 <Throttle_GetFilteredADC+0x70>)
 8000d86:	88fb      	ldrh	r3, [r7, #6]
 8000d88:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]

    if (index >= ADC_AVG_SAMPLES) index = 0;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <Throttle_GetFilteredADC+0x6c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b09      	cmp	r3, #9
 8000d92:	d902      	bls.n	8000d9a <Throttle_GetFilteredADC+0x32>
 8000d94:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd4 <Throttle_GetFilteredADC+0x6c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < ADC_AVG_SAMPLES; i++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	72fb      	strb	r3, [r7, #11]
 8000d9e:	e00a      	b.n	8000db6 <Throttle_GetFilteredADC+0x4e>
        sum += buffer[i];
 8000da0:	7afb      	ldrb	r3, [r7, #11]
 8000da2:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd8 <Throttle_GetFilteredADC+0x70>)
 8000da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000da8:	461a      	mov	r2, r3
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	4413      	add	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < ADC_AVG_SAMPLES; i++)
 8000db0:	7afb      	ldrb	r3, [r7, #11]
 8000db2:	3301      	adds	r3, #1
 8000db4:	72fb      	strb	r3, [r7, #11]
 8000db6:	7afb      	ldrb	r3, [r7, #11]
 8000db8:	2b09      	cmp	r3, #9
 8000dba:	d9f1      	bls.n	8000da0 <Throttle_GetFilteredADC+0x38>

    return (uint16_t)(sum / ADC_AVG_SAMPLES);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4a07      	ldr	r2, [pc, #28]	@ (8000ddc <Throttle_GetFilteredADC+0x74>)
 8000dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc4:	08db      	lsrs	r3, r3, #3
 8000dc6:	b29b      	uxth	r3, r3
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	2000003c 	.word	0x2000003c
 8000dd8:	20000040 	.word	0x20000040
 8000ddc:	cccccccd 	.word	0xcccccccd

08000de0 <Throttle_Update>:


void Throttle_Update(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
    ADC_FilteredValue = Throttle_GetFilteredADC(ADC_RawValue);
 8000de4:	4b14      	ldr	r3, [pc, #80]	@ (8000e38 <Throttle_Update+0x58>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ffbd 	bl	8000d68 <Throttle_GetFilteredADC>
 8000dee:	4603      	mov	r3, r0
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <Throttle_Update+0x5c>)
 8000df4:	801a      	strh	r2, [r3, #0]

    DutyCycle = (ADC_FilteredValue * MAX_PWM) / ADC_MAX_VALUE;
 8000df6:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <Throttle_Update+0x5c>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	2362      	movs	r3, #98	@ 0x62
 8000dfe:	fb02 f303 	mul.w	r3, r2, r3
 8000e02:	4a0f      	ldr	r2, [pc, #60]	@ (8000e40 <Throttle_Update+0x60>)
 8000e04:	fb82 1203 	smull	r1, r2, r2, r3
 8000e08:	441a      	add	r2, r3
 8000e0a:	12d2      	asrs	r2, r2, #11
 8000e0c:	17db      	asrs	r3, r3, #31
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <Throttle_Update+0x64>)
 8000e14:	801a      	strh	r2, [r3, #0]

    if (DutyCycle > MAX_PWM)
 8000e16:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <Throttle_Update+0x64>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	2b62      	cmp	r3, #98	@ 0x62
 8000e1c:	d903      	bls.n	8000e26 <Throttle_Update+0x46>
        DutyCycle = MAX_PWM;
 8000e1e:	4b09      	ldr	r3, [pc, #36]	@ (8000e44 <Throttle_Update+0x64>)
 8000e20:	2262      	movs	r2, #98	@ 0x62
 8000e22:	801a      	strh	r2, [r3, #0]
    else if (DutyCycle < MIN_PWM)
        DutyCycle = 0;
}
 8000e24:	e006      	b.n	8000e34 <Throttle_Update+0x54>
    else if (DutyCycle < MIN_PWM)
 8000e26:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <Throttle_Update+0x64>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	d802      	bhi.n	8000e34 <Throttle_Update+0x54>
        DutyCycle = 0;
 8000e2e:	4b05      	ldr	r3, [pc, #20]	@ (8000e44 <Throttle_Update+0x64>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	801a      	strh	r2, [r3, #0]
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000030 	.word	0x20000030
 8000e3c:	20000032 	.word	0x20000032
 8000e40:	80080081 	.word	0x80080081
 8000e44:	20000034 	.word	0x20000034

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4c:	f000 ffa0 	bl	8001d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e50:	f000 f83c 	bl	8000ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e54:	f000 faec 	bl	8001430 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e58:	f000 facc 	bl	80013f4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e5c:	f000 f894 	bl	8000f88 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000e60:	f000 f8d0 	bl	8001004 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e64:	f000 f9c6 	bl	80011f4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e68:	f000 fa44 	bl	80012f4 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000e6c:	f000 f976 	bl	800115c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  	  	Throttle_Init(&hadc1);
 8000e70:	4811      	ldr	r0, [pc, #68]	@ (8000eb8 <main+0x70>)
 8000e72:	f7ff ff63 	bl	8000d3c <Throttle_Init>

     	 HAL_TIM_Base_Start_IT(&htim2);
 8000e76:	4811      	ldr	r0, [pc, #68]	@ (8000ebc <main+0x74>)
 8000e78:	f002 fd4e 	bl	8003918 <HAL_TIM_Base_Start_IT>


       /*******************************************************************///A-Driving
       HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);//TIMER1 1->2//PA10
 8000e7c:	2108      	movs	r1, #8
 8000e7e:	4810      	ldr	r0, [pc, #64]	@ (8000ec0 <main+0x78>)
 8000e80:	f002 fdf4 	bl	8003a6c <HAL_TIM_PWM_Start>
       HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//TIMER1 1->2//PA9
 8000e84:	2104      	movs	r1, #4
 8000e86:	480e      	ldr	r0, [pc, #56]	@ (8000ec0 <main+0x78>)
 8000e88:	f002 fdf0 	bl	8003a6c <HAL_TIM_PWM_Start>
       /*******************************************************************///B-Driving
       HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);//TIMER3 1->4//PA7
 8000e8c:	2104      	movs	r1, #4
 8000e8e:	480d      	ldr	r0, [pc, #52]	@ (8000ec4 <main+0x7c>)
 8000e90:	f002 fdec 	bl	8003a6c <HAL_TIM_PWM_Start>
       HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);//TIMER3 1->4//PB0
 8000e94:	2108      	movs	r1, #8
 8000e96:	480b      	ldr	r0, [pc, #44]	@ (8000ec4 <main+0x7c>)
 8000e98:	f002 fde8 	bl	8003a6c <HAL_TIM_PWM_Start>
       /*******************************************************************///C-Driving
       HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);//TIMER4 1->4//PB6
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	480a      	ldr	r0, [pc, #40]	@ (8000ec8 <main+0x80>)
 8000ea0:	f002 fde4 	bl	8003a6c <HAL_TIM_PWM_Start>
       HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);//TIMER4 1->4//PB7
 8000ea4:	2104      	movs	r1, #4
 8000ea6:	4808      	ldr	r0, [pc, #32]	@ (8000ec8 <main+0x80>)
 8000ea8:	f002 fde0 	bl	8003a6c <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		Throttle_Update();
 8000eac:	f7ff ff98 	bl	8000de0 <Throttle_Update>
		HallState();
 8000eb0:	f000 fb16 	bl	80014e0 <HallState>
		Throttle_Update();
 8000eb4:	bf00      	nop
 8000eb6:	e7f9      	b.n	8000eac <main+0x64>
 8000eb8:	20000054 	.word	0x20000054
 8000ebc:	20000110 	.word	0x20000110
 8000ec0:	200000c8 	.word	0x200000c8
 8000ec4:	20000158 	.word	0x20000158
 8000ec8:	200001a0 	.word	0x200001a0

08000ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b094      	sub	sp, #80	@ 0x50
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ed6:	2228      	movs	r2, #40	@ 0x28
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f003 fc77 	bl	80047ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000efc:	2301      	movs	r3, #1
 8000efe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000f06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f0a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f10:	2302      	movs	r3, #2
 8000f12:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f18:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f1a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f24:	4618      	mov	r0, r3
 8000f26:	f002 f811 	bl	8002f4c <HAL_RCC_OscConfig>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000f30:	f000 fd32 	bl	8001998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f34:	230f      	movs	r3, #15
 8000f36:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f44:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2102      	movs	r1, #2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f002 fa7c 	bl	8003450 <HAL_RCC_ClockConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f5e:	f000 fd1b 	bl	8001998 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f62:	2302      	movs	r3, #2
 8000f64:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000f66:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f6a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f002 fbcc 	bl	800370c <HAL_RCCEx_PeriphCLKConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000f7a:	f000 fd0d 	bl	8001998 <Error_Handler>
  }
}
 8000f7e:	bf00      	nop
 8000f80:	3750      	adds	r7, #80	@ 0x50
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f98:	4b18      	ldr	r3, [pc, #96]	@ (8000ffc <MX_ADC1_Init+0x74>)
 8000f9a:	4a19      	ldr	r2, [pc, #100]	@ (8001000 <MX_ADC1_Init+0x78>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f9e:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <MX_ADC1_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <MX_ADC1_Init+0x74>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000faa:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <MX_ADC1_Init+0x74>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <MX_ADC1_Init+0x74>)
 8000fb2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000fb6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb8:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <MX_ADC1_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <MX_ADC1_Init+0x74>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc4:	480d      	ldr	r0, [pc, #52]	@ (8000ffc <MX_ADC1_Init+0x74>)
 8000fc6:	f000 ff45 	bl	8001e54 <HAL_ADC_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000fd0:	f000 fce2 	bl	8001998 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <MX_ADC1_Init+0x74>)
 8000fe6:	f001 f907 	bl	80021f8 <HAL_ADC_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ff0:	f000 fcd2 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000054 	.word	0x20000054
 8001000:	40012400 	.word	0x40012400

08001004 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b096      	sub	sp, #88	@ 0x58
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800100a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001018:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]
 8001032:	615a      	str	r2, [r3, #20]
 8001034:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2220      	movs	r2, #32
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f003 fbc6 	bl	80047ce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001042:	4b44      	ldr	r3, [pc, #272]	@ (8001154 <MX_TIM1_Init+0x150>)
 8001044:	4a44      	ldr	r2, [pc, #272]	@ (8001158 <MX_TIM1_Init+0x154>)
 8001046:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001048:	4b42      	ldr	r3, [pc, #264]	@ (8001154 <MX_TIM1_Init+0x150>)
 800104a:	2247      	movs	r2, #71	@ 0x47
 800104c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104e:	4b41      	ldr	r3, [pc, #260]	@ (8001154 <MX_TIM1_Init+0x150>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8001054:	4b3f      	ldr	r3, [pc, #252]	@ (8001154 <MX_TIM1_Init+0x150>)
 8001056:	2264      	movs	r2, #100	@ 0x64
 8001058:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105a:	4b3e      	ldr	r3, [pc, #248]	@ (8001154 <MX_TIM1_Init+0x150>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001060:	4b3c      	ldr	r3, [pc, #240]	@ (8001154 <MX_TIM1_Init+0x150>)
 8001062:	2200      	movs	r2, #0
 8001064:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001066:	4b3b      	ldr	r3, [pc, #236]	@ (8001154 <MX_TIM1_Init+0x150>)
 8001068:	2280      	movs	r2, #128	@ 0x80
 800106a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800106c:	4839      	ldr	r0, [pc, #228]	@ (8001154 <MX_TIM1_Init+0x150>)
 800106e:	f002 fc03 	bl	8003878 <HAL_TIM_Base_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001078:	f000 fc8e 	bl	8001998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800107c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001080:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001082:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001086:	4619      	mov	r1, r3
 8001088:	4832      	ldr	r0, [pc, #200]	@ (8001154 <MX_TIM1_Init+0x150>)
 800108a:	f002 ff43 	bl	8003f14 <HAL_TIM_ConfigClockSource>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001094:	f000 fc80 	bl	8001998 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001098:	482e      	ldr	r0, [pc, #184]	@ (8001154 <MX_TIM1_Init+0x150>)
 800109a:	f002 fc8f 	bl	80039bc <HAL_TIM_PWM_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80010a4:	f000 fc78 	bl	8001998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010b4:	4619      	mov	r1, r3
 80010b6:	4827      	ldr	r0, [pc, #156]	@ (8001154 <MX_TIM1_Init+0x150>)
 80010b8:	f003 fac8 	bl	800464c <HAL_TIMEx_MasterConfigSynchronization>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80010c2:	f000 fc69 	bl	8001998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c6:	2360      	movs	r3, #96	@ 0x60
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010d2:	2300      	movs	r3, #0
 80010d4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010de:	2300      	movs	r3, #0
 80010e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e6:	2204      	movs	r2, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	481a      	ldr	r0, [pc, #104]	@ (8001154 <MX_TIM1_Init+0x150>)
 80010ec:	f002 fe50 	bl	8003d90 <HAL_TIM_PWM_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80010f6:	f000 fc4f 	bl	8001998 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010fe:	2208      	movs	r2, #8
 8001100:	4619      	mov	r1, r3
 8001102:	4814      	ldr	r0, [pc, #80]	@ (8001154 <MX_TIM1_Init+0x150>)
 8001104:	f002 fe44 	bl	8003d90 <HAL_TIM_PWM_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800110e:	f000 fc43 	bl	8001998 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001126:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800112a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4619      	mov	r1, r3
 8001134:	4807      	ldr	r0, [pc, #28]	@ (8001154 <MX_TIM1_Init+0x150>)
 8001136:	f003 fae7 	bl	8004708 <HAL_TIMEx_ConfigBreakDeadTime>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001140:	f000 fc2a 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001144:	4803      	ldr	r0, [pc, #12]	@ (8001154 <MX_TIM1_Init+0x150>)
 8001146:	f000 fd27 	bl	8001b98 <HAL_TIM_MspPostInit>

}
 800114a:	bf00      	nop
 800114c:	3758      	adds	r7, #88	@ 0x58
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200000c8 	.word	0x200000c8
 8001158:	40012c00 	.word	0x40012c00

0800115c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001162:	f107 0308 	add.w	r3, r7, #8
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	463b      	mov	r3, r7
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001178:	4b1d      	ldr	r3, [pc, #116]	@ (80011f0 <MX_TIM2_Init+0x94>)
 800117a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800117e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001180:	4b1b      	ldr	r3, [pc, #108]	@ (80011f0 <MX_TIM2_Init+0x94>)
 8001182:	2247      	movs	r2, #71	@ 0x47
 8001184:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001186:	4b1a      	ldr	r3, [pc, #104]	@ (80011f0 <MX_TIM2_Init+0x94>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800118c:	4b18      	ldr	r3, [pc, #96]	@ (80011f0 <MX_TIM2_Init+0x94>)
 800118e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001192:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001194:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <MX_TIM2_Init+0x94>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800119a:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <MX_TIM2_Init+0x94>)
 800119c:	2280      	movs	r2, #128	@ 0x80
 800119e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011a0:	4813      	ldr	r0, [pc, #76]	@ (80011f0 <MX_TIM2_Init+0x94>)
 80011a2:	f002 fb69 	bl	8003878 <HAL_TIM_Base_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011ac:	f000 fbf4 	bl	8001998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	4619      	mov	r1, r3
 80011bc:	480c      	ldr	r0, [pc, #48]	@ (80011f0 <MX_TIM2_Init+0x94>)
 80011be:	f002 fea9 	bl	8003f14 <HAL_TIM_ConfigClockSource>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011c8:	f000 fbe6 	bl	8001998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011cc:	2300      	movs	r3, #0
 80011ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d4:	463b      	mov	r3, r7
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	@ (80011f0 <MX_TIM2_Init+0x94>)
 80011da:	f003 fa37 	bl	800464c <HAL_TIMEx_MasterConfigSynchronization>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011e4:	f000 fbd8 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000110 	.word	0x20000110

080011f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08e      	sub	sp, #56	@ 0x38
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001208:	f107 0320 	add.w	r3, r7, #32
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
 8001220:	615a      	str	r2, [r3, #20]
 8001222:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001224:	4b31      	ldr	r3, [pc, #196]	@ (80012ec <MX_TIM3_Init+0xf8>)
 8001226:	4a32      	ldr	r2, [pc, #200]	@ (80012f0 <MX_TIM3_Init+0xfc>)
 8001228:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800122a:	4b30      	ldr	r3, [pc, #192]	@ (80012ec <MX_TIM3_Init+0xf8>)
 800122c:	2247      	movs	r2, #71	@ 0x47
 800122e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001230:	4b2e      	ldr	r3, [pc, #184]	@ (80012ec <MX_TIM3_Init+0xf8>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001236:	4b2d      	ldr	r3, [pc, #180]	@ (80012ec <MX_TIM3_Init+0xf8>)
 8001238:	2264      	movs	r2, #100	@ 0x64
 800123a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123c:	4b2b      	ldr	r3, [pc, #172]	@ (80012ec <MX_TIM3_Init+0xf8>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001242:	4b2a      	ldr	r3, [pc, #168]	@ (80012ec <MX_TIM3_Init+0xf8>)
 8001244:	2280      	movs	r2, #128	@ 0x80
 8001246:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001248:	4828      	ldr	r0, [pc, #160]	@ (80012ec <MX_TIM3_Init+0xf8>)
 800124a:	f002 fb15 	bl	8003878 <HAL_TIM_Base_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001254:	f000 fba0 	bl	8001998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001258:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800125c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800125e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001262:	4619      	mov	r1, r3
 8001264:	4821      	ldr	r0, [pc, #132]	@ (80012ec <MX_TIM3_Init+0xf8>)
 8001266:	f002 fe55 	bl	8003f14 <HAL_TIM_ConfigClockSource>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001270:	f000 fb92 	bl	8001998 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001274:	481d      	ldr	r0, [pc, #116]	@ (80012ec <MX_TIM3_Init+0xf8>)
 8001276:	f002 fba1 	bl	80039bc <HAL_TIM_PWM_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001280:	f000 fb8a 	bl	8001998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800128c:	f107 0320 	add.w	r3, r7, #32
 8001290:	4619      	mov	r1, r3
 8001292:	4816      	ldr	r0, [pc, #88]	@ (80012ec <MX_TIM3_Init+0xf8>)
 8001294:	f003 f9da 	bl	800464c <HAL_TIMEx_MasterConfigSynchronization>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800129e:	f000 fb7b 	bl	8001998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a2:	2360      	movs	r3, #96	@ 0x60
 80012a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2204      	movs	r2, #4
 80012b6:	4619      	mov	r1, r3
 80012b8:	480c      	ldr	r0, [pc, #48]	@ (80012ec <MX_TIM3_Init+0xf8>)
 80012ba:	f002 fd69 	bl	8003d90 <HAL_TIM_PWM_ConfigChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80012c4:	f000 fb68 	bl	8001998 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	2208      	movs	r2, #8
 80012cc:	4619      	mov	r1, r3
 80012ce:	4807      	ldr	r0, [pc, #28]	@ (80012ec <MX_TIM3_Init+0xf8>)
 80012d0:	f002 fd5e 	bl	8003d90 <HAL_TIM_PWM_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 80012da:	f000 fb5d 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012de:	4803      	ldr	r0, [pc, #12]	@ (80012ec <MX_TIM3_Init+0xf8>)
 80012e0:	f000 fc5a 	bl	8001b98 <HAL_TIM_MspPostInit>

}
 80012e4:	bf00      	nop
 80012e6:	3738      	adds	r7, #56	@ 0x38
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000158 	.word	0x20000158
 80012f0:	40000400 	.word	0x40000400

080012f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08e      	sub	sp, #56	@ 0x38
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001308:	f107 0320 	add.w	r3, r7, #32
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
 8001320:	615a      	str	r2, [r3, #20]
 8001322:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001324:	4b31      	ldr	r3, [pc, #196]	@ (80013ec <MX_TIM4_Init+0xf8>)
 8001326:	4a32      	ldr	r2, [pc, #200]	@ (80013f0 <MX_TIM4_Init+0xfc>)
 8001328:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 800132a:	4b30      	ldr	r3, [pc, #192]	@ (80013ec <MX_TIM4_Init+0xf8>)
 800132c:	2247      	movs	r2, #71	@ 0x47
 800132e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001330:	4b2e      	ldr	r3, [pc, #184]	@ (80013ec <MX_TIM4_Init+0xf8>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8001336:	4b2d      	ldr	r3, [pc, #180]	@ (80013ec <MX_TIM4_Init+0xf8>)
 8001338:	2264      	movs	r2, #100	@ 0x64
 800133a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133c:	4b2b      	ldr	r3, [pc, #172]	@ (80013ec <MX_TIM4_Init+0xf8>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001342:	4b2a      	ldr	r3, [pc, #168]	@ (80013ec <MX_TIM4_Init+0xf8>)
 8001344:	2280      	movs	r2, #128	@ 0x80
 8001346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001348:	4828      	ldr	r0, [pc, #160]	@ (80013ec <MX_TIM4_Init+0xf8>)
 800134a:	f002 fa95 	bl	8003878 <HAL_TIM_Base_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001354:	f000 fb20 	bl	8001998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001358:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800135c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800135e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001362:	4619      	mov	r1, r3
 8001364:	4821      	ldr	r0, [pc, #132]	@ (80013ec <MX_TIM4_Init+0xf8>)
 8001366:	f002 fdd5 	bl	8003f14 <HAL_TIM_ConfigClockSource>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001370:	f000 fb12 	bl	8001998 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001374:	481d      	ldr	r0, [pc, #116]	@ (80013ec <MX_TIM4_Init+0xf8>)
 8001376:	f002 fb21 	bl	80039bc <HAL_TIM_PWM_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001380:	f000 fb0a 	bl	8001998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800138c:	f107 0320 	add.w	r3, r7, #32
 8001390:	4619      	mov	r1, r3
 8001392:	4816      	ldr	r0, [pc, #88]	@ (80013ec <MX_TIM4_Init+0xf8>)
 8001394:	f003 f95a 	bl	800464c <HAL_TIMEx_MasterConfigSynchronization>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800139e:	f000 fafb 	bl	8001998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a2:	2360      	movs	r3, #96	@ 0x60
 80013a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2200      	movs	r2, #0
 80013b6:	4619      	mov	r1, r3
 80013b8:	480c      	ldr	r0, [pc, #48]	@ (80013ec <MX_TIM4_Init+0xf8>)
 80013ba:	f002 fce9 	bl	8003d90 <HAL_TIM_PWM_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80013c4:	f000 fae8 	bl	8001998 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2204      	movs	r2, #4
 80013cc:	4619      	mov	r1, r3
 80013ce:	4807      	ldr	r0, [pc, #28]	@ (80013ec <MX_TIM4_Init+0xf8>)
 80013d0:	f002 fcde 	bl	8003d90 <HAL_TIM_PWM_ConfigChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 80013da:	f000 fadd 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013de:	4803      	ldr	r0, [pc, #12]	@ (80013ec <MX_TIM4_Init+0xf8>)
 80013e0:	f000 fbda 	bl	8001b98 <HAL_TIM_MspPostInit>

}
 80013e4:	bf00      	nop
 80013e6:	3738      	adds	r7, #56	@ 0x38
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200001a0 	.word	0x200001a0
 80013f0:	40000800 	.word	0x40000800

080013f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013fa:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <MX_DMA_Init+0x38>)
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	4a0b      	ldr	r2, [pc, #44]	@ (800142c <MX_DMA_Init+0x38>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6153      	str	r3, [r2, #20]
 8001406:	4b09      	ldr	r3, [pc, #36]	@ (800142c <MX_DMA_Init+0x38>)
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	200b      	movs	r0, #11
 8001418:	f001 f9bf 	bl	800279a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800141c:	200b      	movs	r0, #11
 800141e:	f001 f9d8 	bl	80027d2 <HAL_NVIC_EnableIRQ>

}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000

08001430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	f107 0310 	add.w	r3, r7, #16
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001444:	4b23      	ldr	r3, [pc, #140]	@ (80014d4 <MX_GPIO_Init+0xa4>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	4a22      	ldr	r2, [pc, #136]	@ (80014d4 <MX_GPIO_Init+0xa4>)
 800144a:	f043 0320 	orr.w	r3, r3, #32
 800144e:	6193      	str	r3, [r2, #24]
 8001450:	4b20      	ldr	r3, [pc, #128]	@ (80014d4 <MX_GPIO_Init+0xa4>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	f003 0320 	and.w	r3, r3, #32
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145c:	4b1d      	ldr	r3, [pc, #116]	@ (80014d4 <MX_GPIO_Init+0xa4>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	4a1c      	ldr	r2, [pc, #112]	@ (80014d4 <MX_GPIO_Init+0xa4>)
 8001462:	f043 0304 	orr.w	r3, r3, #4
 8001466:	6193      	str	r3, [r2, #24]
 8001468:	4b1a      	ldr	r3, [pc, #104]	@ (80014d4 <MX_GPIO_Init+0xa4>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001474:	4b17      	ldr	r3, [pc, #92]	@ (80014d4 <MX_GPIO_Init+0xa4>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	4a16      	ldr	r2, [pc, #88]	@ (80014d4 <MX_GPIO_Init+0xa4>)
 800147a:	f043 0308 	orr.w	r3, r3, #8
 800147e:	6193      	str	r3, [r2, #24]
 8001480:	4b14      	ldr	r3, [pc, #80]	@ (80014d4 <MX_GPIO_Init+0xa4>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	2102      	movs	r1, #2
 8001490:	4811      	ldr	r0, [pc, #68]	@ (80014d8 <MX_GPIO_Init+0xa8>)
 8001492:	f001 fd42 	bl	8002f1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001496:	2302      	movs	r3, #2
 8001498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	2301      	movs	r3, #1
 800149c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80014a2:	2301      	movs	r3, #1
 80014a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a6:	f107 0310 	add.w	r3, r7, #16
 80014aa:	4619      	mov	r1, r3
 80014ac:	480a      	ldr	r0, [pc, #40]	@ (80014d8 <MX_GPIO_Init+0xa8>)
 80014ae:	f001 fb99 	bl	8002be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALL_A_Pin HALL_B_Pin HALL_C_Pin */
  GPIO_InitStruct.Pin = HALL_A_Pin|HALL_B_Pin|HALL_C_Pin;
 80014b2:	2338      	movs	r3, #56	@ 0x38
 80014b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014be:	f107 0310 	add.w	r3, r7, #16
 80014c2:	4619      	mov	r1, r3
 80014c4:	4805      	ldr	r0, [pc, #20]	@ (80014dc <MX_GPIO_Init+0xac>)
 80014c6:	f001 fb8d 	bl	8002be4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80014ca:	bf00      	nop
 80014cc:	3720      	adds	r7, #32
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40010800 	.word	0x40010800
 80014dc:	40010c00 	.word	0x40010c00

080014e0 <HallState>:
 * 	@parameter[in] 	:void
 * 	@return			:void
 *
 */
void HallState(void)//Need To be run after few us
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0

	uint8_t HallCounts[]={0,0,0};
 80014e6:	463b      	mov	r3, r7
 80014e8:	2100      	movs	r1, #0
 80014ea:	460a      	mov	r2, r1
 80014ec:	801a      	strh	r2, [r3, #0]
 80014ee:	460a      	mov	r2, r1
 80014f0:	709a      	strb	r2, [r3, #2]
	for (uint8_t i=0;i<HALL_OverSample;i++)
 80014f2:	2300      	movs	r3, #0
 80014f4:	71fb      	strb	r3, [r7, #7]
 80014f6:	e020      	b.n	800153a <HallState+0x5a>
	{
		HallCounts[0]+=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 80014f8:	2108      	movs	r1, #8
 80014fa:	483d      	ldr	r0, [pc, #244]	@ (80015f0 <HallState+0x110>)
 80014fc:	f001 fcf6 	bl	8002eec <HAL_GPIO_ReadPin>
 8001500:	4603      	mov	r3, r0
 8001502:	461a      	mov	r2, r3
 8001504:	783b      	ldrb	r3, [r7, #0]
 8001506:	4413      	add	r3, r2
 8001508:	b2db      	uxtb	r3, r3
 800150a:	703b      	strb	r3, [r7, #0]
		HallCounts[1]+=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 800150c:	2110      	movs	r1, #16
 800150e:	4838      	ldr	r0, [pc, #224]	@ (80015f0 <HallState+0x110>)
 8001510:	f001 fcec 	bl	8002eec <HAL_GPIO_ReadPin>
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	787b      	ldrb	r3, [r7, #1]
 800151a:	4413      	add	r3, r2
 800151c:	b2db      	uxtb	r3, r3
 800151e:	707b      	strb	r3, [r7, #1]
		HallCounts[2]+=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001520:	2120      	movs	r1, #32
 8001522:	4833      	ldr	r0, [pc, #204]	@ (80015f0 <HallState+0x110>)
 8001524:	f001 fce2 	bl	8002eec <HAL_GPIO_ReadPin>
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	78bb      	ldrb	r3, [r7, #2]
 800152e:	4413      	add	r3, r2
 8001530:	b2db      	uxtb	r3, r3
 8001532:	70bb      	strb	r3, [r7, #2]
	for (uint8_t i=0;i<HALL_OverSample;i++)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	3301      	adds	r3, #1
 8001538:	71fb      	strb	r3, [r7, #7]
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d9db      	bls.n	80014f8 <HallState+0x18>
	}
	uint8_t hall=0;
 8001540:	2300      	movs	r3, #0
 8001542:	71bb      	strb	r3, [r7, #6]
	if(HallCounts[0]>=HALL_OverSample/2)
 8001544:	783b      	ldrb	r3, [r7, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HallState+0x72>
		hall|=(1<<0);
 800154a:	79bb      	ldrb	r3, [r7, #6]
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	71bb      	strb	r3, [r7, #6]
	if(HallCounts[1]>=HALL_OverSample/2)
 8001552:	787b      	ldrb	r3, [r7, #1]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HallState+0x80>
		hall|=(1<<1);
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	f043 0302 	orr.w	r3, r3, #2
 800155e:	71bb      	strb	r3, [r7, #6]
	if(HallCounts[2]>=HALL_OverSample/2)
 8001560:	78bb      	ldrb	r3, [r7, #2]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HallState+0x8e>
		hall|=(1<<2);
 8001566:	79bb      	ldrb	r3, [r7, #6]
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	71bb      	strb	r3, [r7, #6]
	hall&=0x7;
 800156e:	79bb      	ldrb	r3, [r7, #6]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	71bb      	strb	r3, [r7, #6]
	PrevMotorStep=MotorStep;
 8001576:	4b1f      	ldr	r3, [pc, #124]	@ (80015f4 <HallState+0x114>)
 8001578:	781a      	ldrb	r2, [r3, #0]
 800157a:	4b1f      	ldr	r3, [pc, #124]	@ (80015f8 <HallState+0x118>)
 800157c:	701a      	strb	r2, [r3, #0]

	switch (hall)
 800157e:	79bb      	ldrb	r3, [r7, #6]
 8001580:	2b07      	cmp	r3, #7
 8001582:	d82f      	bhi.n	80015e4 <HallState+0x104>
 8001584:	a201      	add	r2, pc, #4	@ (adr r2, 800158c <HallState+0xac>)
 8001586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158a:	bf00      	nop
 800158c:	080015dd 	.word	0x080015dd
 8001590:	080015d5 	.word	0x080015d5
 8001594:	080015b5 	.word	0x080015b5
 8001598:	080015ad 	.word	0x080015ad
 800159c:	080015c5 	.word	0x080015c5
 80015a0:	080015cd 	.word	0x080015cd
 80015a4:	080015bd 	.word	0x080015bd
 80015a8:	080015dd 	.word	0x080015dd
	{
		case 3://011
			MotorStep=0;
 80015ac:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <HallState+0x114>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
		break;
 80015b2:	e017      	b.n	80015e4 <HallState+0x104>

		case 2://010
			MotorStep=1;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <HallState+0x114>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
		break;
 80015ba:	e013      	b.n	80015e4 <HallState+0x104>

		case 6://110
			MotorStep=2;
 80015bc:	4b0d      	ldr	r3, [pc, #52]	@ (80015f4 <HallState+0x114>)
 80015be:	2202      	movs	r2, #2
 80015c0:	701a      	strb	r2, [r3, #0]
		break;
 80015c2:	e00f      	b.n	80015e4 <HallState+0x104>

		case 4://100
			MotorStep=3;
 80015c4:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <HallState+0x114>)
 80015c6:	2203      	movs	r2, #3
 80015c8:	701a      	strb	r2, [r3, #0]
		break;
 80015ca:	e00b      	b.n	80015e4 <HallState+0x104>

		case 5 ://101
			MotorStep=4;
 80015cc:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <HallState+0x114>)
 80015ce:	2204      	movs	r2, #4
 80015d0:	701a      	strb	r2, [r3, #0]
		break;
 80015d2:	e007      	b.n	80015e4 <HallState+0x104>

		case 1://001
			MotorStep=5;
 80015d4:	4b07      	ldr	r3, [pc, #28]	@ (80015f4 <HallState+0x114>)
 80015d6:	2205      	movs	r2, #5
 80015d8:	701a      	strb	r2, [r3, #0]
		break;
 80015da:	e003      	b.n	80015e4 <HallState+0x104>

		case 7 ://Invalid cases
		case 0:	//Invalid cases
			MotorStep=6;
 80015dc:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <HallState+0x114>)
 80015de:	2206      	movs	r2, #6
 80015e0:	701a      	strb	r2, [r3, #0]
		break;
 80015e2:	bf00      	nop

	}
	NextStep();
 80015e4:	f000 f80a 	bl	80015fc <NextStep>


}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40010c00 	.word	0x40010c00
 80015f4:	200001f5 	.word	0x200001f5
 80015f8:	200001f4 	.word	0x200001f4

080015fc <NextStep>:
 * 	@parameter[in] 	:void
 * 	@return			:void
 *
 */
void NextStep(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	//TIM4->CCR1---v-
	/*******************************************************************///W-Driving
	//TIM3->CCR3---w+
	//TIM3->CCR2---w-
	/*******************************************************************/
	WaitState();/*before changing the state checks if the state already change or not
 8001600:	f000 f8b4 	bl	800176c <WaitState>
if yes that means the motor does electric change and also should do delay between the state changes
if no that means
no pulse generated and doesnt need to wait between state changes  */
	switch (MotorStep)
 8001604:	4b54      	ldr	r3, [pc, #336]	@ (8001758 <NextStep+0x15c>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b06      	cmp	r3, #6
 800160a:	f200 80a2 	bhi.w	8001752 <NextStep+0x156>
 800160e:	a201      	add	r2, pc, #4	@ (adr r2, 8001614 <NextStep+0x18>)
 8001610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001614:	08001631 	.word	0x08001631
 8001618:	0800165b 	.word	0x0800165b
 800161c:	08001685 	.word	0x08001685
 8001620:	080016af 	.word	0x080016af
 8001624:	080016d9 	.word	0x080016d9
 8001628:	08001703 	.word	0x08001703
 800162c:	0800172d 	.word	0x0800172d
	{
	case 0://011

		/*******************************************************************///U-Driving
		TIM1->CCR3=0;//u+
 8001630:	4b4a      	ldr	r3, [pc, #296]	@ (800175c <NextStep+0x160>)
 8001632:	2200      	movs	r2, #0
 8001634:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR2=0;//u-
 8001636:	4b49      	ldr	r3, [pc, #292]	@ (800175c <NextStep+0x160>)
 8001638:	2200      	movs	r2, #0
 800163a:	639a      	str	r2, [r3, #56]	@ 0x38
		/*******************************************************************///V-Driving
		TIM4->CCR2=DutyCycle;//v+
 800163c:	4b48      	ldr	r3, [pc, #288]	@ (8001760 <NextStep+0x164>)
 800163e:	881a      	ldrh	r2, [r3, #0]
 8001640:	4b48      	ldr	r3, [pc, #288]	@ (8001764 <NextStep+0x168>)
 8001642:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM4->CCR1=0;//v-
 8001644:	4b47      	ldr	r3, [pc, #284]	@ (8001764 <NextStep+0x168>)
 8001646:	2200      	movs	r2, #0
 8001648:	635a      	str	r2, [r3, #52]	@ 0x34
		/*******************************************************************///W-Driving
		TIM3->CCR3=0;//w+
 800164a:	4b47      	ldr	r3, [pc, #284]	@ (8001768 <NextStep+0x16c>)
 800164c:	2200      	movs	r2, #0
 800164e:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR2=DutyCycle;//w-
 8001650:	4b43      	ldr	r3, [pc, #268]	@ (8001760 <NextStep+0x164>)
 8001652:	881a      	ldrh	r2, [r3, #0]
 8001654:	4b44      	ldr	r3, [pc, #272]	@ (8001768 <NextStep+0x16c>)
 8001656:	639a      	str	r2, [r3, #56]	@ 0x38
		/*******************************************************************/
	break;
 8001658:	e07b      	b.n	8001752 <NextStep+0x156>

	case 1://010

		/*******************************************************************///U-Driving
		TIM1->CCR3=0;//u+
 800165a:	4b40      	ldr	r3, [pc, #256]	@ (800175c <NextStep+0x160>)
 800165c:	2200      	movs	r2, #0
 800165e:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR2=DutyCycle;//u-
 8001660:	4b3f      	ldr	r3, [pc, #252]	@ (8001760 <NextStep+0x164>)
 8001662:	881a      	ldrh	r2, [r3, #0]
 8001664:	4b3d      	ldr	r3, [pc, #244]	@ (800175c <NextStep+0x160>)
 8001666:	639a      	str	r2, [r3, #56]	@ 0x38
		/*******************************************************************///V-Driving
		TIM4->CCR2=DutyCycle;//v+
 8001668:	4b3d      	ldr	r3, [pc, #244]	@ (8001760 <NextStep+0x164>)
 800166a:	881a      	ldrh	r2, [r3, #0]
 800166c:	4b3d      	ldr	r3, [pc, #244]	@ (8001764 <NextStep+0x168>)
 800166e:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM4->CCR1=0;//v-
 8001670:	4b3c      	ldr	r3, [pc, #240]	@ (8001764 <NextStep+0x168>)
 8001672:	2200      	movs	r2, #0
 8001674:	635a      	str	r2, [r3, #52]	@ 0x34
		/*******************************************************************///W-Driving
		TIM3->CCR3=0;//w+
 8001676:	4b3c      	ldr	r3, [pc, #240]	@ (8001768 <NextStep+0x16c>)
 8001678:	2200      	movs	r2, #0
 800167a:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR2=0;//w-
 800167c:	4b3a      	ldr	r3, [pc, #232]	@ (8001768 <NextStep+0x16c>)
 800167e:	2200      	movs	r2, #0
 8001680:	639a      	str	r2, [r3, #56]	@ 0x38
		/*******************************************************************/

	break;
 8001682:	e066      	b.n	8001752 <NextStep+0x156>

	case 2://110

		/*******************************************************************///U-Driving
		TIM1->CCR3=0;//u+
 8001684:	4b35      	ldr	r3, [pc, #212]	@ (800175c <NextStep+0x160>)
 8001686:	2200      	movs	r2, #0
 8001688:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR2=DutyCycle;//u-
 800168a:	4b35      	ldr	r3, [pc, #212]	@ (8001760 <NextStep+0x164>)
 800168c:	881a      	ldrh	r2, [r3, #0]
 800168e:	4b33      	ldr	r3, [pc, #204]	@ (800175c <NextStep+0x160>)
 8001690:	639a      	str	r2, [r3, #56]	@ 0x38
		/*******************************************************************///V-Driving
		TIM4->CCR2=0;//v+
 8001692:	4b34      	ldr	r3, [pc, #208]	@ (8001764 <NextStep+0x168>)
 8001694:	2200      	movs	r2, #0
 8001696:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM4->CCR1=0;//v-
 8001698:	4b32      	ldr	r3, [pc, #200]	@ (8001764 <NextStep+0x168>)
 800169a:	2200      	movs	r2, #0
 800169c:	635a      	str	r2, [r3, #52]	@ 0x34
		/*******************************************************************///W-Driving
		TIM3->CCR3=DutyCycle;//w+
 800169e:	4b30      	ldr	r3, [pc, #192]	@ (8001760 <NextStep+0x164>)
 80016a0:	881a      	ldrh	r2, [r3, #0]
 80016a2:	4b31      	ldr	r3, [pc, #196]	@ (8001768 <NextStep+0x16c>)
 80016a4:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR2=0;//w-
 80016a6:	4b30      	ldr	r3, [pc, #192]	@ (8001768 <NextStep+0x16c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	639a      	str	r2, [r3, #56]	@ 0x38
		/*******************************************************************/
	break;
 80016ac:	e051      	b.n	8001752 <NextStep+0x156>

	case 3://100
		/*******************************************************************///U-Driving
		TIM1->CCR3=0;//u+
 80016ae:	4b2b      	ldr	r3, [pc, #172]	@ (800175c <NextStep+0x160>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR2=0;//u-
 80016b4:	4b29      	ldr	r3, [pc, #164]	@ (800175c <NextStep+0x160>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	639a      	str	r2, [r3, #56]	@ 0x38
		/*******************************************************************///V-Driving
		TIM4->CCR2=0;//v+
 80016ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001764 <NextStep+0x168>)
 80016bc:	2200      	movs	r2, #0
 80016be:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM4->CCR1=DutyCycle;//v-
 80016c0:	4b27      	ldr	r3, [pc, #156]	@ (8001760 <NextStep+0x164>)
 80016c2:	881a      	ldrh	r2, [r3, #0]
 80016c4:	4b27      	ldr	r3, [pc, #156]	@ (8001764 <NextStep+0x168>)
 80016c6:	635a      	str	r2, [r3, #52]	@ 0x34
		/*******************************************************************///W-Driving
		TIM3->CCR3=DutyCycle;//w+
 80016c8:	4b25      	ldr	r3, [pc, #148]	@ (8001760 <NextStep+0x164>)
 80016ca:	881a      	ldrh	r2, [r3, #0]
 80016cc:	4b26      	ldr	r3, [pc, #152]	@ (8001768 <NextStep+0x16c>)
 80016ce:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR2=0;//w-
 80016d0:	4b25      	ldr	r3, [pc, #148]	@ (8001768 <NextStep+0x16c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	639a      	str	r2, [r3, #56]	@ 0x38
		/*******************************************************************/

	break;
 80016d6:	e03c      	b.n	8001752 <NextStep+0x156>

	case 4://101
		/*******************************************************************///U-Driving
		TIM1->CCR3=DutyCycle;//u+
 80016d8:	4b21      	ldr	r3, [pc, #132]	@ (8001760 <NextStep+0x164>)
 80016da:	881a      	ldrh	r2, [r3, #0]
 80016dc:	4b1f      	ldr	r3, [pc, #124]	@ (800175c <NextStep+0x160>)
 80016de:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR2=0;//u-
 80016e0:	4b1e      	ldr	r3, [pc, #120]	@ (800175c <NextStep+0x160>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	639a      	str	r2, [r3, #56]	@ 0x38
		/*******************************************************************///V-Driving
		TIM4->CCR2=0;//v+
 80016e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001764 <NextStep+0x168>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM4->CCR1=DutyCycle;//v-
 80016ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <NextStep+0x164>)
 80016ee:	881a      	ldrh	r2, [r3, #0]
 80016f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <NextStep+0x168>)
 80016f2:	635a      	str	r2, [r3, #52]	@ 0x34
		/*******************************************************************///W-Driving
		TIM3->CCR3=0;//w+
 80016f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001768 <NextStep+0x16c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR2=0;//w-
 80016fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <NextStep+0x16c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	639a      	str	r2, [r3, #56]	@ 0x38
		/*******************************************************************/
	break;
 8001700:	e027      	b.n	8001752 <NextStep+0x156>

	case 5://001
		/*******************************************************************///U-Driving
		TIM1->CCR3=DutyCycle;//u+
 8001702:	4b17      	ldr	r3, [pc, #92]	@ (8001760 <NextStep+0x164>)
 8001704:	881a      	ldrh	r2, [r3, #0]
 8001706:	4b15      	ldr	r3, [pc, #84]	@ (800175c <NextStep+0x160>)
 8001708:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR2=0;//u-
 800170a:	4b14      	ldr	r3, [pc, #80]	@ (800175c <NextStep+0x160>)
 800170c:	2200      	movs	r2, #0
 800170e:	639a      	str	r2, [r3, #56]	@ 0x38
		/*******************************************************************///V-Driving
		TIM4->CCR2=0;//v+
 8001710:	4b14      	ldr	r3, [pc, #80]	@ (8001764 <NextStep+0x168>)
 8001712:	2200      	movs	r2, #0
 8001714:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM4->CCR1=0;//v-
 8001716:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <NextStep+0x168>)
 8001718:	2200      	movs	r2, #0
 800171a:	635a      	str	r2, [r3, #52]	@ 0x34
		/*******************************************************************///W-Driving
		TIM3->CCR3=0;//w+
 800171c:	4b12      	ldr	r3, [pc, #72]	@ (8001768 <NextStep+0x16c>)
 800171e:	2200      	movs	r2, #0
 8001720:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR2=DutyCycle;//w-
 8001722:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <NextStep+0x164>)
 8001724:	881a      	ldrh	r2, [r3, #0]
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <NextStep+0x16c>)
 8001728:	639a      	str	r2, [r3, #56]	@ 0x38
	/*******************************************************************/
		break;
 800172a:	e012      	b.n	8001752 <NextStep+0x156>
	case 6:
		/*******************************************************************///U-Driving
				TIM1->CCR3=0;//u+
 800172c:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <NextStep+0x160>)
 800172e:	2200      	movs	r2, #0
 8001730:	63da      	str	r2, [r3, #60]	@ 0x3c
				TIM1->CCR2=0;//u-
 8001732:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <NextStep+0x160>)
 8001734:	2200      	movs	r2, #0
 8001736:	639a      	str	r2, [r3, #56]	@ 0x38
				/*******************************************************************///V-Driving
				TIM4->CCR2=0;//v+
 8001738:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <NextStep+0x168>)
 800173a:	2200      	movs	r2, #0
 800173c:	639a      	str	r2, [r3, #56]	@ 0x38
				TIM4->CCR1=0;//v-
 800173e:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <NextStep+0x168>)
 8001740:	2200      	movs	r2, #0
 8001742:	635a      	str	r2, [r3, #52]	@ 0x34
				/*******************************************************************///W-Driving
				TIM3->CCR3=0;//w+
 8001744:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <NextStep+0x16c>)
 8001746:	2200      	movs	r2, #0
 8001748:	63da      	str	r2, [r3, #60]	@ 0x3c
				TIM3->CCR2=0;//w-
 800174a:	4b07      	ldr	r3, [pc, #28]	@ (8001768 <NextStep+0x16c>)
 800174c:	2200      	movs	r2, #0
 800174e:	639a      	str	r2, [r3, #56]	@ 0x38
			/*******************************************************************/
	break;
 8001750:	bf00      	nop


	}


}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200001f5 	.word	0x200001f5
 800175c:	40012c00 	.word	0x40012c00
 8001760:	20000034 	.word	0x20000034
 8001764:	40000800 	.word	0x40000800
 8001768:	40000400 	.word	0x40000400

0800176c <WaitState>:
 * 	@parameter[in] 	:void
 * 	@return			:void
 *
 */
void WaitState(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
		/*******************************************************************///W-Driving
		//TIM3->CCR3---w+
		//TIM3->CCR2---w-
		/*******************************************************************/
	//Speed Calculate Mechanism
		if(PrevMotorStep!=MotorStep)
 8001770:	4b59      	ldr	r3, [pc, #356]	@ (80018d8 <WaitState+0x16c>)
 8001772:	781a      	ldrb	r2, [r3, #0]
 8001774:	4b59      	ldr	r3, [pc, #356]	@ (80018dc <WaitState+0x170>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	f000 80a7 	beq.w	80018cc <WaitState+0x160>
		{
			PulsesPerInterval++;
 800177e:	4b58      	ldr	r3, [pc, #352]	@ (80018e0 <WaitState+0x174>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	3301      	adds	r3, #1
 8001784:	4a56      	ldr	r2, [pc, #344]	@ (80018e0 <WaitState+0x174>)
 8001786:	6013      	str	r3, [r2, #0]

			switch(MotorStep)
 8001788:	4b54      	ldr	r3, [pc, #336]	@ (80018dc <WaitState+0x170>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b05      	cmp	r3, #5
 800178e:	f200 8087 	bhi.w	80018a0 <WaitState+0x134>
 8001792:	a201      	add	r2, pc, #4	@ (adr r2, 8001798 <WaitState+0x2c>)
 8001794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001798:	080017b1 	.word	0x080017b1
 800179c:	080017d9 	.word	0x080017d9
 80017a0:	08001801 	.word	0x08001801
 80017a4:	08001829 	.word	0x08001829
 80017a8:	08001851 	.word	0x08001851
 80017ac:	08001879 	.word	0x08001879
			{
					case 0:
						// A-Driving → U
						TIM1->CCR3 = 0;
 80017b0:	4b4c      	ldr	r3, [pc, #304]	@ (80018e4 <WaitState+0x178>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	63da      	str	r2, [r3, #60]	@ 0x3c
						TIM1->CCR2 = 0;
 80017b6:	4b4b      	ldr	r3, [pc, #300]	@ (80018e4 <WaitState+0x178>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	639a      	str	r2, [r3, #56]	@ 0x38
						// B-Driving → V
						TIM4->CCR2 = DutyCycle;
 80017bc:	4b4a      	ldr	r3, [pc, #296]	@ (80018e8 <WaitState+0x17c>)
 80017be:	881a      	ldrh	r2, [r3, #0]
 80017c0:	4b4a      	ldr	r3, [pc, #296]	@ (80018ec <WaitState+0x180>)
 80017c2:	639a      	str	r2, [r3, #56]	@ 0x38
						TIM4->CCR1 = 0;
 80017c4:	4b49      	ldr	r3, [pc, #292]	@ (80018ec <WaitState+0x180>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	635a      	str	r2, [r3, #52]	@ 0x34
						// C-Driving → W
						TIM3->CCR3 = 0;
 80017ca:	4b49      	ldr	r3, [pc, #292]	@ (80018f0 <WaitState+0x184>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	63da      	str	r2, [r3, #60]	@ 0x3c
						TIM3->CCR2 = 0;
 80017d0:	4b47      	ldr	r3, [pc, #284]	@ (80018f0 <WaitState+0x184>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	639a      	str	r2, [r3, #56]	@ 0x38
					break;
 80017d6:	e076      	b.n	80018c6 <WaitState+0x15a>

					case 1:
						// A-Driving → U
						TIM1->CCR3 = 0;
 80017d8:	4b42      	ldr	r3, [pc, #264]	@ (80018e4 <WaitState+0x178>)
 80017da:	2200      	movs	r2, #0
 80017dc:	63da      	str	r2, [r3, #60]	@ 0x3c
						TIM1->CCR2 = DutyCycle;
 80017de:	4b42      	ldr	r3, [pc, #264]	@ (80018e8 <WaitState+0x17c>)
 80017e0:	881a      	ldrh	r2, [r3, #0]
 80017e2:	4b40      	ldr	r3, [pc, #256]	@ (80018e4 <WaitState+0x178>)
 80017e4:	639a      	str	r2, [r3, #56]	@ 0x38
						// B-Driving → V
						TIM4->CCR2 = 0;
 80017e6:	4b41      	ldr	r3, [pc, #260]	@ (80018ec <WaitState+0x180>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	639a      	str	r2, [r3, #56]	@ 0x38
						TIM4->CCR1 = 0;
 80017ec:	4b3f      	ldr	r3, [pc, #252]	@ (80018ec <WaitState+0x180>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	635a      	str	r2, [r3, #52]	@ 0x34
						// C-Driving → W
						TIM3->CCR3 = 0;
 80017f2:	4b3f      	ldr	r3, [pc, #252]	@ (80018f0 <WaitState+0x184>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	63da      	str	r2, [r3, #60]	@ 0x3c
						TIM3->CCR2 = 0;
 80017f8:	4b3d      	ldr	r3, [pc, #244]	@ (80018f0 <WaitState+0x184>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	639a      	str	r2, [r3, #56]	@ 0x38
					break;
 80017fe:	e062      	b.n	80018c6 <WaitState+0x15a>

					case 2:
						// A-Driving → U
						TIM1->CCR3 = 0;
 8001800:	4b38      	ldr	r3, [pc, #224]	@ (80018e4 <WaitState+0x178>)
 8001802:	2200      	movs	r2, #0
 8001804:	63da      	str	r2, [r3, #60]	@ 0x3c
						TIM1->CCR2 = 0;
 8001806:	4b37      	ldr	r3, [pc, #220]	@ (80018e4 <WaitState+0x178>)
 8001808:	2200      	movs	r2, #0
 800180a:	639a      	str	r2, [r3, #56]	@ 0x38
						// B-Driving → V
						TIM4->CCR2 = 0;
 800180c:	4b37      	ldr	r3, [pc, #220]	@ (80018ec <WaitState+0x180>)
 800180e:	2200      	movs	r2, #0
 8001810:	639a      	str	r2, [r3, #56]	@ 0x38
						TIM4->CCR1 = 0;
 8001812:	4b36      	ldr	r3, [pc, #216]	@ (80018ec <WaitState+0x180>)
 8001814:	2200      	movs	r2, #0
 8001816:	635a      	str	r2, [r3, #52]	@ 0x34
						// C-Driving → W
						TIM3->CCR3 = DutyCycle;
 8001818:	4b33      	ldr	r3, [pc, #204]	@ (80018e8 <WaitState+0x17c>)
 800181a:	881a      	ldrh	r2, [r3, #0]
 800181c:	4b34      	ldr	r3, [pc, #208]	@ (80018f0 <WaitState+0x184>)
 800181e:	63da      	str	r2, [r3, #60]	@ 0x3c
						TIM3->CCR2 = 0;
 8001820:	4b33      	ldr	r3, [pc, #204]	@ (80018f0 <WaitState+0x184>)
 8001822:	2200      	movs	r2, #0
 8001824:	639a      	str	r2, [r3, #56]	@ 0x38
					break;
 8001826:	e04e      	b.n	80018c6 <WaitState+0x15a>

					case 3:
						// A-Driving → U
						TIM1->CCR3 = 0;
 8001828:	4b2e      	ldr	r3, [pc, #184]	@ (80018e4 <WaitState+0x178>)
 800182a:	2200      	movs	r2, #0
 800182c:	63da      	str	r2, [r3, #60]	@ 0x3c
						TIM1->CCR2 = 0;
 800182e:	4b2d      	ldr	r3, [pc, #180]	@ (80018e4 <WaitState+0x178>)
 8001830:	2200      	movs	r2, #0
 8001832:	639a      	str	r2, [r3, #56]	@ 0x38
						// B-Driving → V
						TIM4->CCR2 = 0;
 8001834:	4b2d      	ldr	r3, [pc, #180]	@ (80018ec <WaitState+0x180>)
 8001836:	2200      	movs	r2, #0
 8001838:	639a      	str	r2, [r3, #56]	@ 0x38
						TIM4->CCR1 = DutyCycle;
 800183a:	4b2b      	ldr	r3, [pc, #172]	@ (80018e8 <WaitState+0x17c>)
 800183c:	881a      	ldrh	r2, [r3, #0]
 800183e:	4b2b      	ldr	r3, [pc, #172]	@ (80018ec <WaitState+0x180>)
 8001840:	635a      	str	r2, [r3, #52]	@ 0x34
						// C-Driving → W
						TIM3->CCR3 = 0;
 8001842:	4b2b      	ldr	r3, [pc, #172]	@ (80018f0 <WaitState+0x184>)
 8001844:	2200      	movs	r2, #0
 8001846:	63da      	str	r2, [r3, #60]	@ 0x3c
						TIM3->CCR2 = 0;
 8001848:	4b29      	ldr	r3, [pc, #164]	@ (80018f0 <WaitState+0x184>)
 800184a:	2200      	movs	r2, #0
 800184c:	639a      	str	r2, [r3, #56]	@ 0x38
					break;
 800184e:	e03a      	b.n	80018c6 <WaitState+0x15a>

					case 4:
						// A-Driving → U
						TIM1->CCR3 = DutyCycle;
 8001850:	4b25      	ldr	r3, [pc, #148]	@ (80018e8 <WaitState+0x17c>)
 8001852:	881a      	ldrh	r2, [r3, #0]
 8001854:	4b23      	ldr	r3, [pc, #140]	@ (80018e4 <WaitState+0x178>)
 8001856:	63da      	str	r2, [r3, #60]	@ 0x3c
						TIM1->CCR2 = 0;
 8001858:	4b22      	ldr	r3, [pc, #136]	@ (80018e4 <WaitState+0x178>)
 800185a:	2200      	movs	r2, #0
 800185c:	639a      	str	r2, [r3, #56]	@ 0x38
						// B-Driving → V
						TIM4->CCR2 = 0;
 800185e:	4b23      	ldr	r3, [pc, #140]	@ (80018ec <WaitState+0x180>)
 8001860:	2200      	movs	r2, #0
 8001862:	639a      	str	r2, [r3, #56]	@ 0x38
						TIM4->CCR1 = 0;
 8001864:	4b21      	ldr	r3, [pc, #132]	@ (80018ec <WaitState+0x180>)
 8001866:	2200      	movs	r2, #0
 8001868:	635a      	str	r2, [r3, #52]	@ 0x34
						// C-Driving → W
						TIM3->CCR3 = 0;
 800186a:	4b21      	ldr	r3, [pc, #132]	@ (80018f0 <WaitState+0x184>)
 800186c:	2200      	movs	r2, #0
 800186e:	63da      	str	r2, [r3, #60]	@ 0x3c
						TIM3->CCR2 = 0;
 8001870:	4b1f      	ldr	r3, [pc, #124]	@ (80018f0 <WaitState+0x184>)
 8001872:	2200      	movs	r2, #0
 8001874:	639a      	str	r2, [r3, #56]	@ 0x38
					break;
 8001876:	e026      	b.n	80018c6 <WaitState+0x15a>

					case 5:
						// A-Driving → U
						TIM1->CCR3 = 0;
 8001878:	4b1a      	ldr	r3, [pc, #104]	@ (80018e4 <WaitState+0x178>)
 800187a:	2200      	movs	r2, #0
 800187c:	63da      	str	r2, [r3, #60]	@ 0x3c
						TIM1->CCR2 = 0;
 800187e:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <WaitState+0x178>)
 8001880:	2200      	movs	r2, #0
 8001882:	639a      	str	r2, [r3, #56]	@ 0x38
						// B-Driving → V
						TIM4->CCR2 = 0;
 8001884:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <WaitState+0x180>)
 8001886:	2200      	movs	r2, #0
 8001888:	639a      	str	r2, [r3, #56]	@ 0x38
						TIM4->CCR1 = 0;
 800188a:	4b18      	ldr	r3, [pc, #96]	@ (80018ec <WaitState+0x180>)
 800188c:	2200      	movs	r2, #0
 800188e:	635a      	str	r2, [r3, #52]	@ 0x34
						// C-Driving → W
						TIM3->CCR3 = 0;
 8001890:	4b17      	ldr	r3, [pc, #92]	@ (80018f0 <WaitState+0x184>)
 8001892:	2200      	movs	r2, #0
 8001894:	63da      	str	r2, [r3, #60]	@ 0x3c
						TIM3->CCR2 = DutyCycle;
 8001896:	4b14      	ldr	r3, [pc, #80]	@ (80018e8 <WaitState+0x17c>)
 8001898:	881a      	ldrh	r2, [r3, #0]
 800189a:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <WaitState+0x184>)
 800189c:	639a      	str	r2, [r3, #56]	@ 0x38
					break;
 800189e:	e012      	b.n	80018c6 <WaitState+0x15a>

					default:
						TIM1->CCR3 = 0;
 80018a0:	4b10      	ldr	r3, [pc, #64]	@ (80018e4 <WaitState+0x178>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	63da      	str	r2, [r3, #60]	@ 0x3c
						TIM1->CCR2 = 0;
 80018a6:	4b0f      	ldr	r3, [pc, #60]	@ (80018e4 <WaitState+0x178>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	639a      	str	r2, [r3, #56]	@ 0x38
						TIM4->CCR2 = 0;
 80018ac:	4b0f      	ldr	r3, [pc, #60]	@ (80018ec <WaitState+0x180>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	639a      	str	r2, [r3, #56]	@ 0x38
						TIM4->CCR1 = 0;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <WaitState+0x180>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	635a      	str	r2, [r3, #52]	@ 0x34
						TIM3->CCR3 = 0;
 80018b8:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <WaitState+0x184>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	63da      	str	r2, [r3, #60]	@ 0x3c
						TIM3->CCR2 = 0;
 80018be:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <WaitState+0x184>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	639a      	str	r2, [r3, #56]	@ 0x38
					break;
 80018c4:	bf00      	nop
				}


			Delay_us(TIM_DELAY);
 80018c6:	2001      	movs	r0, #1
 80018c8:	f000 f814 	bl	80018f4 <Delay_us>
		}
		else
		{

		}
		PrevMotorStep = MotorStep;
 80018cc:	4b03      	ldr	r3, [pc, #12]	@ (80018dc <WaitState+0x170>)
 80018ce:	781a      	ldrb	r2, [r3, #0]
 80018d0:	4b01      	ldr	r3, [pc, #4]	@ (80018d8 <WaitState+0x16c>)
 80018d2:	701a      	strb	r2, [r3, #0]

}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200001f4 	.word	0x200001f4
 80018dc:	200001f5 	.word	0x200001f5
 80018e0:	20000028 	.word	0x20000028
 80018e4:	40012c00 	.word	0x40012c00
 80018e8:	20000034 	.word	0x20000034
 80018ec:	40000800 	.word	0x40000800
 80018f0:	40000400 	.word	0x40000400

080018f4 <Delay_us>:




void Delay_us(uint16_t DELAY)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 80018fe:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <Delay_us+0x2c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	@ 0x24
    while(__HAL_TIM_GET_COUNTER(&htim2) < DELAY);
 8001906:	bf00      	nop
 8001908:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <Delay_us+0x2c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	429a      	cmp	r2, r3
 8001912:	d3f9      	bcc.n	8001908 <Delay_us+0x14>
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	20000110 	.word	0x20000110

08001924 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
   HAL_TIM_IRQHandler(&htim2);
 8001928:	4802      	ldr	r0, [pc, #8]	@ (8001934 <TIM2_IRQHandler+0x10>)
 800192a:	f002 f941 	bl	8003bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000110 	.word	0x20000110

08001938 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001948:	d117      	bne.n	800197a <HAL_TIM_PeriodElapsedCallback+0x42>
    {
        microTicks++; // كل 1ms
 800194a:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	3301      	adds	r3, #1
 8001950:	4a0c      	ldr	r2, [pc, #48]	@ (8001984 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001952:	6013      	str	r3, [r2, #0]

        if(microTicks % 200 == 0) // كل 200ms
 8001954:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800195a:	fba3 1302 	umull	r1, r3, r3, r2
 800195e:	099b      	lsrs	r3, r3, #6
 8001960:	21c8      	movs	r1, #200	@ 0xc8
 8001962:	fb01 f303 	mul.w	r3, r1, r3
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d106      	bne.n	800197a <HAL_TIM_PeriodElapsedCallback+0x42>
        {
            SpeedCalculation(&MotorSpeedRpm, &MotorSpeedKmh);
 800196c:	4907      	ldr	r1, [pc, #28]	@ (800198c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800196e:	4808      	ldr	r0, [pc, #32]	@ (8001990 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001970:	f7ff f982 	bl	8000c78 <SpeedCalculation>
            PulsesPerInterval = 0;
 8001974:	4b07      	ldr	r3, [pc, #28]	@ (8001994 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
        }
    }
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200001e8 	.word	0x200001e8
 8001988:	51eb851f 	.word	0x51eb851f
 800198c:	200001f0 	.word	0x200001f0
 8001990:	200001ec 	.word	0x200001ec
 8001994:	20000028 	.word	0x20000028

08001998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800199c:	b672      	cpsid	i
}
 800199e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <Error_Handler+0x8>

080019a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019aa:	4b15      	ldr	r3, [pc, #84]	@ (8001a00 <HAL_MspInit+0x5c>)
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	4a14      	ldr	r2, [pc, #80]	@ (8001a00 <HAL_MspInit+0x5c>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6193      	str	r3, [r2, #24]
 80019b6:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <HAL_MspInit+0x5c>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <HAL_MspInit+0x5c>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001a00 <HAL_MspInit+0x5c>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019cc:	61d3      	str	r3, [r2, #28]
 80019ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <HAL_MspInit+0x5c>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80019da:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <HAL_MspInit+0x60>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	4a04      	ldr	r2, [pc, #16]	@ (8001a04 <HAL_MspInit+0x60>)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40010000 	.word	0x40010000

08001a08 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0310 	add.w	r3, r7, #16
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a28      	ldr	r2, [pc, #160]	@ (8001ac4 <HAL_ADC_MspInit+0xbc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d149      	bne.n	8001abc <HAL_ADC_MspInit+0xb4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a28:	4b27      	ldr	r3, [pc, #156]	@ (8001ac8 <HAL_ADC_MspInit+0xc0>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	4a26      	ldr	r2, [pc, #152]	@ (8001ac8 <HAL_ADC_MspInit+0xc0>)
 8001a2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a32:	6193      	str	r3, [r2, #24]
 8001a34:	4b24      	ldr	r3, [pc, #144]	@ (8001ac8 <HAL_ADC_MspInit+0xc0>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a40:	4b21      	ldr	r3, [pc, #132]	@ (8001ac8 <HAL_ADC_MspInit+0xc0>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	4a20      	ldr	r2, [pc, #128]	@ (8001ac8 <HAL_ADC_MspInit+0xc0>)
 8001a46:	f043 0304 	orr.w	r3, r3, #4
 8001a4a:	6193      	str	r3, [r2, #24]
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac8 <HAL_ADC_MspInit+0xc0>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Throttle_Pin;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Throttle_GPIO_Port, &GPIO_InitStruct);
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	4619      	mov	r1, r3
 8001a66:	4819      	ldr	r0, [pc, #100]	@ (8001acc <HAL_ADC_MspInit+0xc4>)
 8001a68:	f001 f8bc 	bl	8002be4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a6c:	4b18      	ldr	r3, [pc, #96]	@ (8001ad0 <HAL_ADC_MspInit+0xc8>)
 8001a6e:	4a19      	ldr	r2, [pc, #100]	@ (8001ad4 <HAL_ADC_MspInit+0xcc>)
 8001a70:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a72:	4b17      	ldr	r3, [pc, #92]	@ (8001ad0 <HAL_ADC_MspInit+0xc8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a78:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <HAL_ADC_MspInit+0xc8>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <HAL_ADC_MspInit+0xc8>)
 8001a80:	2280      	movs	r2, #128	@ 0x80
 8001a82:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a84:	4b12      	ldr	r3, [pc, #72]	@ (8001ad0 <HAL_ADC_MspInit+0xc8>)
 8001a86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a8a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a8c:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <HAL_ADC_MspInit+0xc8>)
 8001a8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a92:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a94:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <HAL_ADC_MspInit+0xc8>)
 8001a96:	2220      	movs	r2, #32
 8001a98:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad0 <HAL_ADC_MspInit+0xc8>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001aa0:	480b      	ldr	r0, [pc, #44]	@ (8001ad0 <HAL_ADC_MspInit+0xc8>)
 8001aa2:	f000 feb1 	bl	8002808 <HAL_DMA_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001aac:	f7ff ff74 	bl	8001998 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a07      	ldr	r2, [pc, #28]	@ (8001ad0 <HAL_ADC_MspInit+0xc8>)
 8001ab4:	621a      	str	r2, [r3, #32]
 8001ab6:	4a06      	ldr	r2, [pc, #24]	@ (8001ad0 <HAL_ADC_MspInit+0xc8>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001abc:	bf00      	nop
 8001abe:	3720      	adds	r7, #32
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40012400 	.word	0x40012400
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40010800 	.word	0x40010800
 8001ad0:	20000084 	.word	0x20000084
 8001ad4:	40020008 	.word	0x40020008

08001ad8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a28      	ldr	r2, [pc, #160]	@ (8001b88 <HAL_TIM_Base_MspInit+0xb0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d10c      	bne.n	8001b04 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aea:	4b28      	ldr	r3, [pc, #160]	@ (8001b8c <HAL_TIM_Base_MspInit+0xb4>)
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	4a27      	ldr	r2, [pc, #156]	@ (8001b8c <HAL_TIM_Base_MspInit+0xb4>)
 8001af0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001af4:	6193      	str	r3, [r2, #24]
 8001af6:	4b25      	ldr	r3, [pc, #148]	@ (8001b8c <HAL_TIM_Base_MspInit+0xb4>)
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b02:	e03c      	b.n	8001b7e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b0c:	d114      	bne.n	8001b38 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001b8c <HAL_TIM_Base_MspInit+0xb4>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	4a1e      	ldr	r2, [pc, #120]	@ (8001b8c <HAL_TIM_Base_MspInit+0xb4>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	61d3      	str	r3, [r2, #28]
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001b8c <HAL_TIM_Base_MspInit+0xb4>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	201c      	movs	r0, #28
 8001b2c:	f000 fe35 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b30:	201c      	movs	r0, #28
 8001b32:	f000 fe4e 	bl	80027d2 <HAL_NVIC_EnableIRQ>
}
 8001b36:	e022      	b.n	8001b7e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a14      	ldr	r2, [pc, #80]	@ (8001b90 <HAL_TIM_Base_MspInit+0xb8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d10c      	bne.n	8001b5c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b42:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <HAL_TIM_Base_MspInit+0xb4>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	4a11      	ldr	r2, [pc, #68]	@ (8001b8c <HAL_TIM_Base_MspInit+0xb4>)
 8001b48:	f043 0302 	orr.w	r3, r3, #2
 8001b4c:	61d3      	str	r3, [r2, #28]
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b8c <HAL_TIM_Base_MspInit+0xb4>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
}
 8001b5a:	e010      	b.n	8001b7e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0c      	ldr	r2, [pc, #48]	@ (8001b94 <HAL_TIM_Base_MspInit+0xbc>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d10b      	bne.n	8001b7e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b66:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <HAL_TIM_Base_MspInit+0xb4>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	4a08      	ldr	r2, [pc, #32]	@ (8001b8c <HAL_TIM_Base_MspInit+0xb4>)
 8001b6c:	f043 0304 	orr.w	r3, r3, #4
 8001b70:	61d3      	str	r3, [r2, #28]
 8001b72:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <HAL_TIM_Base_MspInit+0xb4>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40012c00 	.word	0x40012c00
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40000400 	.word	0x40000400
 8001b94:	40000800 	.word	0x40000800

08001b98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	@ 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0318 	add.w	r3, r7, #24
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a40      	ldr	r2, [pc, #256]	@ (8001cb4 <HAL_TIM_MspPostInit+0x11c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d126      	bne.n	8001c06 <HAL_TIM_MspPostInit+0x6e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb8:	4b3f      	ldr	r3, [pc, #252]	@ (8001cb8 <HAL_TIM_MspPostInit+0x120>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	4a3e      	ldr	r2, [pc, #248]	@ (8001cb8 <HAL_TIM_MspPostInit+0x120>)
 8001bbe:	f043 0304 	orr.w	r3, r3, #4
 8001bc2:	6193      	str	r3, [r2, #24]
 8001bc4:	4b3c      	ldr	r3, [pc, #240]	@ (8001cb8 <HAL_TIM_MspPostInit+0x120>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = UL_3v3_Pin;
 8001bd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(UL_3v3_GPIO_Port, &GPIO_InitStruct);
 8001bde:	f107 0318 	add.w	r3, r7, #24
 8001be2:	4619      	mov	r1, r3
 8001be4:	4835      	ldr	r0, [pc, #212]	@ (8001cbc <HAL_TIM_MspPostInit+0x124>)
 8001be6:	f000 fffd 	bl	8002be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UH_3v3_Pin;
 8001bea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(UH_3v3_GPIO_Port, &GPIO_InitStruct);
 8001bf8:	f107 0318 	add.w	r3, r7, #24
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	482f      	ldr	r0, [pc, #188]	@ (8001cbc <HAL_TIM_MspPostInit+0x124>)
 8001c00:	f000 fff0 	bl	8002be4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c04:	e052      	b.n	8001cac <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM3)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a2d      	ldr	r2, [pc, #180]	@ (8001cc0 <HAL_TIM_MspPostInit+0x128>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d130      	bne.n	8001c72 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c10:	4b29      	ldr	r3, [pc, #164]	@ (8001cb8 <HAL_TIM_MspPostInit+0x120>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	4a28      	ldr	r2, [pc, #160]	@ (8001cb8 <HAL_TIM_MspPostInit+0x120>)
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	6193      	str	r3, [r2, #24]
 8001c1c:	4b26      	ldr	r3, [pc, #152]	@ (8001cb8 <HAL_TIM_MspPostInit+0x120>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c28:	4b23      	ldr	r3, [pc, #140]	@ (8001cb8 <HAL_TIM_MspPostInit+0x120>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	4a22      	ldr	r2, [pc, #136]	@ (8001cb8 <HAL_TIM_MspPostInit+0x120>)
 8001c2e:	f043 0308 	orr.w	r3, r3, #8
 8001c32:	6193      	str	r3, [r2, #24]
 8001c34:	4b20      	ldr	r3, [pc, #128]	@ (8001cb8 <HAL_TIM_MspPostInit+0x120>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = WL_3v3_Pin;
 8001c40:	2380      	movs	r3, #128	@ 0x80
 8001c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(WL_3v3_GPIO_Port, &GPIO_InitStruct);
 8001c4c:	f107 0318 	add.w	r3, r7, #24
 8001c50:	4619      	mov	r1, r3
 8001c52:	481a      	ldr	r0, [pc, #104]	@ (8001cbc <HAL_TIM_MspPostInit+0x124>)
 8001c54:	f000 ffc6 	bl	8002be4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = WH_3v3_Pin;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c60:	2302      	movs	r3, #2
 8001c62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(WH_3v3_GPIO_Port, &GPIO_InitStruct);
 8001c64:	f107 0318 	add.w	r3, r7, #24
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4816      	ldr	r0, [pc, #88]	@ (8001cc4 <HAL_TIM_MspPostInit+0x12c>)
 8001c6c:	f000 ffba 	bl	8002be4 <HAL_GPIO_Init>
}
 8001c70:	e01c      	b.n	8001cac <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM4)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a14      	ldr	r2, [pc, #80]	@ (8001cc8 <HAL_TIM_MspPostInit+0x130>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d117      	bne.n	8001cac <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb8 <HAL_TIM_MspPostInit+0x120>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb8 <HAL_TIM_MspPostInit+0x120>)
 8001c82:	f043 0308 	orr.w	r3, r3, #8
 8001c86:	6193      	str	r3, [r2, #24]
 8001c88:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <HAL_TIM_MspPostInit+0x120>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VL_3v3_Pin|VH_3v3_Pin;
 8001c94:	23c0      	movs	r3, #192	@ 0xc0
 8001c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca0:	f107 0318 	add.w	r3, r7, #24
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4807      	ldr	r0, [pc, #28]	@ (8001cc4 <HAL_TIM_MspPostInit+0x12c>)
 8001ca8:	f000 ff9c 	bl	8002be4 <HAL_GPIO_Init>
}
 8001cac:	bf00      	nop
 8001cae:	3728      	adds	r7, #40	@ 0x28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40012c00 	.word	0x40012c00
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40010800 	.word	0x40010800
 8001cc0:	40000400 	.word	0x40000400
 8001cc4:	40010c00 	.word	0x40010c00
 8001cc8:	40000800 	.word	0x40000800

08001ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <NMI_Handler+0x4>

08001cd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <HardFault_Handler+0x4>

08001cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <MemManage_Handler+0x4>

08001ce4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <BusFault_Handler+0x4>

08001cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <UsageFault_Handler+0x4>

08001cf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr

08001d0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d1c:	f000 f87e 	bl	8001e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d28:	4802      	ldr	r0, [pc, #8]	@ (8001d34 <DMA1_Channel1_IRQHandler+0x10>)
 8001d2a:	f000 fe27 	bl	800297c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000084 	.word	0x20000084

08001d38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <Reset_Handler>:
 8001d44:	f7ff fff8 	bl	8001d38 <SystemInit>
 8001d48:	480b      	ldr	r0, [pc, #44]	@ (8001d78 <LoopFillZerobss+0xe>)
 8001d4a:	490c      	ldr	r1, [pc, #48]	@ (8001d7c <LoopFillZerobss+0x12>)
 8001d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d80 <LoopFillZerobss+0x16>)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e002      	b.n	8001d58 <LoopCopyDataInit>

08001d52 <CopyDataInit>:
 8001d52:	58d4      	ldr	r4, [r2, r3]
 8001d54:	50c4      	str	r4, [r0, r3]
 8001d56:	3304      	adds	r3, #4

08001d58 <LoopCopyDataInit>:
 8001d58:	18c4      	adds	r4, r0, r3
 8001d5a:	428c      	cmp	r4, r1
 8001d5c:	d3f9      	bcc.n	8001d52 <CopyDataInit>
 8001d5e:	4a09      	ldr	r2, [pc, #36]	@ (8001d84 <LoopFillZerobss+0x1a>)
 8001d60:	4c09      	ldr	r4, [pc, #36]	@ (8001d88 <LoopFillZerobss+0x1e>)
 8001d62:	2300      	movs	r3, #0
 8001d64:	e001      	b.n	8001d6a <LoopFillZerobss>

08001d66 <FillZerobss>:
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	3204      	adds	r2, #4

08001d6a <LoopFillZerobss>:
 8001d6a:	42a2      	cmp	r2, r4
 8001d6c:	d3fb      	bcc.n	8001d66 <FillZerobss>
 8001d6e:	f002 fd37 	bl	80047e0 <__libc_init_array>
 8001d72:	f7ff f869 	bl	8000e48 <main>
 8001d76:	4770      	bx	lr
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	2000000c 	.word	0x2000000c
 8001d80:	0800486c 	.word	0x0800486c
 8001d84:	2000000c 	.word	0x2000000c
 8001d88:	200001fc 	.word	0x200001fc

08001d8c <ADC1_2_IRQHandler>:
 8001d8c:	e7fe      	b.n	8001d8c <ADC1_2_IRQHandler>
	...

08001d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d94:	4b08      	ldr	r3, [pc, #32]	@ (8001db8 <HAL_Init+0x28>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a07      	ldr	r2, [pc, #28]	@ (8001db8 <HAL_Init+0x28>)
 8001d9a:	f043 0310 	orr.w	r3, r3, #16
 8001d9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da0:	2003      	movs	r0, #3
 8001da2:	f000 fcef 	bl	8002784 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001da6:	200f      	movs	r0, #15
 8001da8:	f000 f808 	bl	8001dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dac:	f7ff fdfa 	bl	80019a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40022000 	.word	0x40022000

08001dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc4:	4b12      	ldr	r3, [pc, #72]	@ (8001e10 <HAL_InitTick+0x54>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <HAL_InitTick+0x58>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 fd07 	bl	80027ee <HAL_SYSTICK_Config>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00e      	b.n	8001e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b0f      	cmp	r3, #15
 8001dee:	d80a      	bhi.n	8001e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df0:	2200      	movs	r2, #0
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f000 fccf 	bl	800279a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dfc:	4a06      	ldr	r2, [pc, #24]	@ (8001e18 <HAL_InitTick+0x5c>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e000      	b.n	8001e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000000 	.word	0x20000000
 8001e14:	20000008 	.word	0x20000008
 8001e18:	20000004 	.word	0x20000004

08001e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e20:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <HAL_IncTick+0x1c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <HAL_IncTick+0x20>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4a03      	ldr	r2, [pc, #12]	@ (8001e3c <HAL_IncTick+0x20>)
 8001e2e:	6013      	str	r3, [r2, #0]
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	20000008 	.word	0x20000008
 8001e3c:	200001f8 	.word	0x200001f8

08001e40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b02      	ldr	r3, [pc, #8]	@ (8001e50 <HAL_GetTick+0x10>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	200001f8 	.word	0x200001f8

08001e54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e0be      	b.n	8001ff4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d109      	bne.n	8001e98 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff fdb8 	bl	8001a08 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 faff 	bl	800249c <ADC_ConversionStop_Disable>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f040 8099 	bne.w	8001fe2 <HAL_ADC_Init+0x18e>
 8001eb0:	7dfb      	ldrb	r3, [r7, #23]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f040 8095 	bne.w	8001fe2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ebc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ec0:	f023 0302 	bic.w	r3, r3, #2
 8001ec4:	f043 0202 	orr.w	r2, r3, #2
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ed4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	7b1b      	ldrb	r3, [r3, #12]
 8001eda:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001edc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001eec:	d003      	beq.n	8001ef6 <HAL_ADC_Init+0xa2>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d102      	bne.n	8001efc <HAL_ADC_Init+0xa8>
 8001ef6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001efa:	e000      	b.n	8001efe <HAL_ADC_Init+0xaa>
 8001efc:	2300      	movs	r3, #0
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	7d1b      	ldrb	r3, [r3, #20]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d119      	bne.n	8001f40 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	7b1b      	ldrb	r3, [r3, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d109      	bne.n	8001f28 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	035a      	lsls	r2, r3, #13
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	e00b      	b.n	8001f40 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2c:	f043 0220 	orr.w	r2, r3, #32
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f38:	f043 0201 	orr.w	r2, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	4b28      	ldr	r3, [pc, #160]	@ (8001ffc <HAL_ADC_Init+0x1a8>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	68b9      	ldr	r1, [r7, #8]
 8001f64:	430b      	orrs	r3, r1
 8001f66:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f70:	d003      	beq.n	8001f7a <HAL_ADC_Init+0x126>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d104      	bne.n	8001f84 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	051b      	lsls	r3, r3, #20
 8001f82:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f8a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	4b18      	ldr	r3, [pc, #96]	@ (8002000 <HAL_ADC_Init+0x1ac>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d10b      	bne.n	8001fc0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb2:	f023 0303 	bic.w	r3, r3, #3
 8001fb6:	f043 0201 	orr.w	r2, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fbe:	e018      	b.n	8001ff2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc4:	f023 0312 	bic.w	r3, r3, #18
 8001fc8:	f043 0210 	orr.w	r2, r3, #16
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd4:	f043 0201 	orr.w	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fe0:	e007      	b.n	8001ff2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe6:	f043 0210 	orr.w	r2, r3, #16
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	ffe1f7fd 	.word	0xffe1f7fd
 8002000:	ff1f0efe 	.word	0xff1f0efe

08002004 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a64      	ldr	r2, [pc, #400]	@ (80021ac <HAL_ADC_Start_DMA+0x1a8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d004      	beq.n	8002028 <HAL_ADC_Start_DMA+0x24>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a63      	ldr	r2, [pc, #396]	@ (80021b0 <HAL_ADC_Start_DMA+0x1ac>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d106      	bne.n	8002036 <HAL_ADC_Start_DMA+0x32>
 8002028:	4b60      	ldr	r3, [pc, #384]	@ (80021ac <HAL_ADC_Start_DMA+0x1a8>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002030:	2b00      	cmp	r3, #0
 8002032:	f040 80b3 	bne.w	800219c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_ADC_Start_DMA+0x40>
 8002040:	2302      	movs	r3, #2
 8002042:	e0ae      	b.n	80021a2 <HAL_ADC_Start_DMA+0x19e>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 f9cb 	bl	80023e8 <ADC_Enable>
 8002052:	4603      	mov	r3, r0
 8002054:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002056:	7dfb      	ldrb	r3, [r7, #23]
 8002058:	2b00      	cmp	r3, #0
 800205a:	f040 809a 	bne.w	8002192 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002062:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002066:	f023 0301 	bic.w	r3, r3, #1
 800206a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a4e      	ldr	r2, [pc, #312]	@ (80021b0 <HAL_ADC_Start_DMA+0x1ac>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d105      	bne.n	8002088 <HAL_ADC_Start_DMA+0x84>
 800207c:	4b4b      	ldr	r3, [pc, #300]	@ (80021ac <HAL_ADC_Start_DMA+0x1a8>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d115      	bne.n	80020b4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d026      	beq.n	80020f0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020b2:	e01d      	b.n	80020f0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a39      	ldr	r2, [pc, #228]	@ (80021ac <HAL_ADC_Start_DMA+0x1a8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d004      	beq.n	80020d4 <HAL_ADC_Start_DMA+0xd0>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a38      	ldr	r2, [pc, #224]	@ (80021b0 <HAL_ADC_Start_DMA+0x1ac>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d10d      	bne.n	80020f0 <HAL_ADC_Start_DMA+0xec>
 80020d4:	4b35      	ldr	r3, [pc, #212]	@ (80021ac <HAL_ADC_Start_DMA+0x1a8>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d007      	beq.n	80020f0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d006      	beq.n	800210a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002100:	f023 0206 	bic.w	r2, r3, #6
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002108:	e002      	b.n	8002110 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4a25      	ldr	r2, [pc, #148]	@ (80021b4 <HAL_ADC_Start_DMA+0x1b0>)
 800211e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	4a24      	ldr	r2, [pc, #144]	@ (80021b8 <HAL_ADC_Start_DMA+0x1b4>)
 8002126:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	4a23      	ldr	r2, [pc, #140]	@ (80021bc <HAL_ADC_Start_DMA+0x1b8>)
 800212e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0202 	mvn.w	r2, #2
 8002138:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002148:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a18      	ldr	r0, [r3, #32]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	334c      	adds	r3, #76	@ 0x4c
 8002154:	4619      	mov	r1, r3
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f000 fbaf 	bl	80028bc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002168:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800216c:	d108      	bne.n	8002180 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800217c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800217e:	e00f      	b.n	80021a0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800218e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002190:	e006      	b.n	80021a0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800219a:	e001      	b.n	80021a0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40012400 	.word	0x40012400
 80021b0:	40012800 	.word	0x40012800
 80021b4:	0800251f 	.word	0x0800251f
 80021b8:	0800259b 	.word	0x0800259b
 80021bc:	080025b7 	.word	0x080025b7

080021c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr

080021d2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
	...

080021f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x20>
 8002214:	2302      	movs	r3, #2
 8002216:	e0dc      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x1da>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b06      	cmp	r3, #6
 8002226:	d81c      	bhi.n	8002262 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	3b05      	subs	r3, #5
 800223a:	221f      	movs	r2, #31
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	4019      	ands	r1, r3
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	3b05      	subs	r3, #5
 8002254:	fa00 f203 	lsl.w	r2, r0, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002260:	e03c      	b.n	80022dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b0c      	cmp	r3, #12
 8002268:	d81c      	bhi.n	80022a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	3b23      	subs	r3, #35	@ 0x23
 800227c:	221f      	movs	r2, #31
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	4019      	ands	r1, r3
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	3b23      	subs	r3, #35	@ 0x23
 8002296:	fa00 f203 	lsl.w	r2, r0, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80022a2:	e01b      	b.n	80022dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	3b41      	subs	r3, #65	@ 0x41
 80022b6:	221f      	movs	r2, #31
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	4019      	ands	r1, r3
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	6818      	ldr	r0, [r3, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	3b41      	subs	r3, #65	@ 0x41
 80022d0:	fa00 f203 	lsl.w	r2, r0, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b09      	cmp	r3, #9
 80022e2:	d91c      	bls.n	800231e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68d9      	ldr	r1, [r3, #12]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	3b1e      	subs	r3, #30
 80022f6:	2207      	movs	r2, #7
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	4019      	ands	r1, r3
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	6898      	ldr	r0, [r3, #8]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4613      	mov	r3, r2
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	4413      	add	r3, r2
 800230e:	3b1e      	subs	r3, #30
 8002310:	fa00 f203 	lsl.w	r2, r0, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	430a      	orrs	r2, r1
 800231a:	60da      	str	r2, [r3, #12]
 800231c:	e019      	b.n	8002352 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6919      	ldr	r1, [r3, #16]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4613      	mov	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	2207      	movs	r2, #7
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	4019      	ands	r1, r3
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	6898      	ldr	r0, [r3, #8]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4613      	mov	r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4413      	add	r3, r2
 8002346:	fa00 f203 	lsl.w	r2, r0, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b10      	cmp	r3, #16
 8002358:	d003      	beq.n	8002362 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800235e:	2b11      	cmp	r3, #17
 8002360:	d132      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a1d      	ldr	r2, [pc, #116]	@ (80023dc <HAL_ADC_ConfigChannel+0x1e4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d125      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d126      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002388:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2b10      	cmp	r3, #16
 8002390:	d11a      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002392:	4b13      	ldr	r3, [pc, #76]	@ (80023e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a13      	ldr	r2, [pc, #76]	@ (80023e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	0c9a      	lsrs	r2, r3, #18
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023a8:	e002      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f9      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x1b2>
 80023b6:	e007      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023bc:	f043 0220 	orr.w	r2, r3, #32
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr
 80023dc:	40012400 	.word	0x40012400
 80023e0:	20000000 	.word	0x20000000
 80023e4:	431bde83 	.word	0x431bde83

080023e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b01      	cmp	r3, #1
 8002404:	d040      	beq.n	8002488 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 0201 	orr.w	r2, r2, #1
 8002414:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002416:	4b1f      	ldr	r3, [pc, #124]	@ (8002494 <ADC_Enable+0xac>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a1f      	ldr	r2, [pc, #124]	@ (8002498 <ADC_Enable+0xb0>)
 800241c:	fba2 2303 	umull	r2, r3, r2, r3
 8002420:	0c9b      	lsrs	r3, r3, #18
 8002422:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002424:	e002      	b.n	800242c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	3b01      	subs	r3, #1
 800242a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f9      	bne.n	8002426 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002432:	f7ff fd05 	bl	8001e40 <HAL_GetTick>
 8002436:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002438:	e01f      	b.n	800247a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800243a:	f7ff fd01 	bl	8001e40 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d918      	bls.n	800247a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b01      	cmp	r3, #1
 8002454:	d011      	beq.n	800247a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245a:	f043 0210 	orr.w	r2, r3, #16
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002466:	f043 0201 	orr.w	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e007      	b.n	800248a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b01      	cmp	r3, #1
 8002486:	d1d8      	bne.n	800243a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000000 	.word	0x20000000
 8002498:	431bde83 	.word	0x431bde83

0800249c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d12e      	bne.n	8002514 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0201 	bic.w	r2, r2, #1
 80024c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024c6:	f7ff fcbb 	bl	8001e40 <HAL_GetTick>
 80024ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024cc:	e01b      	b.n	8002506 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024ce:	f7ff fcb7 	bl	8001e40 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d914      	bls.n	8002506 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d10d      	bne.n	8002506 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ee:	f043 0210 	orr.w	r2, r3, #16
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fa:	f043 0201 	orr.w	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e007      	b.n	8002516 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b01      	cmp	r3, #1
 8002512:	d0dc      	beq.n	80024ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002530:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002534:	2b00      	cmp	r3, #0
 8002536:	d127      	bne.n	8002588 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800254e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002552:	d115      	bne.n	8002580 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002558:	2b00      	cmp	r3, #0
 800255a:	d111      	bne.n	8002580 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002560:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d105      	bne.n	8002580 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002578:	f043 0201 	orr.w	r2, r3, #1
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f7ff fe1d 	bl	80021c0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002586:	e004      	b.n	8002592 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	4798      	blx	r3
}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f7ff fe12 	bl	80021d2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d4:	f043 0204 	orr.w	r2, r3, #4
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f7ff fe01 	bl	80021e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025e2:	bf00      	nop
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002608:	4013      	ands	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002614:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002618:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800261c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800261e:	4a04      	ldr	r2, [pc, #16]	@ (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	60d3      	str	r3, [r2, #12]
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002638:	4b04      	ldr	r3, [pc, #16]	@ (800264c <__NVIC_GetPriorityGrouping+0x18>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	f003 0307 	and.w	r3, r3, #7
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	2b00      	cmp	r3, #0
 8002660:	db0b      	blt.n	800267a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	4906      	ldr	r1, [pc, #24]	@ (8002684 <__NVIC_EnableIRQ+0x34>)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	2001      	movs	r0, #1
 8002672:	fa00 f202 	lsl.w	r2, r0, r2
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr
 8002684:	e000e100 	.word	0xe000e100

08002688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	6039      	str	r1, [r7, #0]
 8002692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002698:	2b00      	cmp	r3, #0
 800269a:	db0a      	blt.n	80026b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	490c      	ldr	r1, [pc, #48]	@ (80026d4 <__NVIC_SetPriority+0x4c>)
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	0112      	lsls	r2, r2, #4
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	440b      	add	r3, r1
 80026ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b0:	e00a      	b.n	80026c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	4908      	ldr	r1, [pc, #32]	@ (80026d8 <__NVIC_SetPriority+0x50>)
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	3b04      	subs	r3, #4
 80026c0:	0112      	lsls	r2, r2, #4
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	440b      	add	r3, r1
 80026c6:	761a      	strb	r2, [r3, #24]
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000e100 	.word	0xe000e100
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026dc:	b480      	push	{r7}
 80026de:	b089      	sub	sp, #36	@ 0x24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f1c3 0307 	rsb	r3, r3, #7
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	bf28      	it	cs
 80026fa:	2304      	movcs	r3, #4
 80026fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3304      	adds	r3, #4
 8002702:	2b06      	cmp	r3, #6
 8002704:	d902      	bls.n	800270c <NVIC_EncodePriority+0x30>
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3b03      	subs	r3, #3
 800270a:	e000      	b.n	800270e <NVIC_EncodePriority+0x32>
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002710:	f04f 32ff 	mov.w	r2, #4294967295
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43da      	mvns	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	401a      	ands	r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002724:	f04f 31ff 	mov.w	r1, #4294967295
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	fa01 f303 	lsl.w	r3, r1, r3
 800272e:	43d9      	mvns	r1, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002734:	4313      	orrs	r3, r2
         );
}
 8002736:	4618      	mov	r0, r3
 8002738:	3724      	adds	r7, #36	@ 0x24
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3b01      	subs	r3, #1
 800274c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002750:	d301      	bcc.n	8002756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002752:	2301      	movs	r3, #1
 8002754:	e00f      	b.n	8002776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002756:	4a0a      	ldr	r2, [pc, #40]	@ (8002780 <SysTick_Config+0x40>)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3b01      	subs	r3, #1
 800275c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275e:	210f      	movs	r1, #15
 8002760:	f04f 30ff 	mov.w	r0, #4294967295
 8002764:	f7ff ff90 	bl	8002688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002768:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <SysTick_Config+0x40>)
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276e:	4b04      	ldr	r3, [pc, #16]	@ (8002780 <SysTick_Config+0x40>)
 8002770:	2207      	movs	r2, #7
 8002772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	e000e010 	.word	0xe000e010

08002784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff ff2d 	bl	80025ec <__NVIC_SetPriorityGrouping>
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800279a:	b580      	push	{r7, lr}
 800279c:	b086      	sub	sp, #24
 800279e:	af00      	add	r7, sp, #0
 80027a0:	4603      	mov	r3, r0
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027ac:	f7ff ff42 	bl	8002634 <__NVIC_GetPriorityGrouping>
 80027b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	6978      	ldr	r0, [r7, #20]
 80027b8:	f7ff ff90 	bl	80026dc <NVIC_EncodePriority>
 80027bc:	4602      	mov	r2, r0
 80027be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c2:	4611      	mov	r1, r2
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff ff5f 	bl	8002688 <__NVIC_SetPriority>
}
 80027ca:	bf00      	nop
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	4603      	mov	r3, r0
 80027da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff35 	bl	8002650 <__NVIC_EnableIRQ>
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff ffa2 	bl	8002740 <SysTick_Config>
 80027fc:	4603      	mov	r3, r0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e043      	b.n	80028a6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	4b22      	ldr	r3, [pc, #136]	@ (80028b0 <HAL_DMA_Init+0xa8>)
 8002826:	4413      	add	r3, r2
 8002828:	4a22      	ldr	r2, [pc, #136]	@ (80028b4 <HAL_DMA_Init+0xac>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	091b      	lsrs	r3, r3, #4
 8002830:	009a      	lsls	r2, r3, #2
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a1f      	ldr	r2, [pc, #124]	@ (80028b8 <HAL_DMA_Init+0xb0>)
 800283a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002852:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002856:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002860:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800286c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002878:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	bffdfff8 	.word	0xbffdfff8
 80028b4:	cccccccd 	.word	0xcccccccd
 80028b8:	40020000 	.word	0x40020000

080028bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_DMA_Start_IT+0x20>
 80028d8:	2302      	movs	r3, #2
 80028da:	e04b      	b.n	8002974 <HAL_DMA_Start_IT+0xb8>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d13a      	bne.n	8002966 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0201 	bic.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 f937 	bl	8002b88 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291e:	2b00      	cmp	r3, #0
 8002920:	d008      	beq.n	8002934 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 020e 	orr.w	r2, r2, #14
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	e00f      	b.n	8002954 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0204 	bic.w	r2, r2, #4
 8002942:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 020a 	orr.w	r2, r2, #10
 8002952:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	e005      	b.n	8002972 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800296e:	2302      	movs	r3, #2
 8002970:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002972:	7dfb      	ldrb	r3, [r7, #23]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002998:	2204      	movs	r2, #4
 800299a:	409a      	lsls	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d04f      	beq.n	8002a44 <HAL_DMA_IRQHandler+0xc8>
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d04a      	beq.n	8002a44 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0320 	and.w	r3, r3, #32
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d107      	bne.n	80029cc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0204 	bic.w	r2, r2, #4
 80029ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a66      	ldr	r2, [pc, #408]	@ (8002b6c <HAL_DMA_IRQHandler+0x1f0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d029      	beq.n	8002a2a <HAL_DMA_IRQHandler+0xae>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a65      	ldr	r2, [pc, #404]	@ (8002b70 <HAL_DMA_IRQHandler+0x1f4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d022      	beq.n	8002a26 <HAL_DMA_IRQHandler+0xaa>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a63      	ldr	r2, [pc, #396]	@ (8002b74 <HAL_DMA_IRQHandler+0x1f8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d01a      	beq.n	8002a20 <HAL_DMA_IRQHandler+0xa4>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a62      	ldr	r2, [pc, #392]	@ (8002b78 <HAL_DMA_IRQHandler+0x1fc>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d012      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x9e>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a60      	ldr	r2, [pc, #384]	@ (8002b7c <HAL_DMA_IRQHandler+0x200>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d00a      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x98>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a5f      	ldr	r2, [pc, #380]	@ (8002b80 <HAL_DMA_IRQHandler+0x204>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d102      	bne.n	8002a0e <HAL_DMA_IRQHandler+0x92>
 8002a08:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a0c:	e00e      	b.n	8002a2c <HAL_DMA_IRQHandler+0xb0>
 8002a0e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002a12:	e00b      	b.n	8002a2c <HAL_DMA_IRQHandler+0xb0>
 8002a14:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002a18:	e008      	b.n	8002a2c <HAL_DMA_IRQHandler+0xb0>
 8002a1a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a1e:	e005      	b.n	8002a2c <HAL_DMA_IRQHandler+0xb0>
 8002a20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a24:	e002      	b.n	8002a2c <HAL_DMA_IRQHandler+0xb0>
 8002a26:	2340      	movs	r3, #64	@ 0x40
 8002a28:	e000      	b.n	8002a2c <HAL_DMA_IRQHandler+0xb0>
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	4a55      	ldr	r2, [pc, #340]	@ (8002b84 <HAL_DMA_IRQHandler+0x208>)
 8002a2e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 8094 	beq.w	8002b62 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002a42:	e08e      	b.n	8002b62 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a48:	2202      	movs	r2, #2
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d056      	beq.n	8002b02 <HAL_DMA_IRQHandler+0x186>
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d051      	beq.n	8002b02 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0320 	and.w	r3, r3, #32
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10b      	bne.n	8002a84 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 020a 	bic.w	r2, r2, #10
 8002a7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a38      	ldr	r2, [pc, #224]	@ (8002b6c <HAL_DMA_IRQHandler+0x1f0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d029      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0x166>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a37      	ldr	r2, [pc, #220]	@ (8002b70 <HAL_DMA_IRQHandler+0x1f4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d022      	beq.n	8002ade <HAL_DMA_IRQHandler+0x162>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a35      	ldr	r2, [pc, #212]	@ (8002b74 <HAL_DMA_IRQHandler+0x1f8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d01a      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x15c>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a34      	ldr	r2, [pc, #208]	@ (8002b78 <HAL_DMA_IRQHandler+0x1fc>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d012      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0x156>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a32      	ldr	r2, [pc, #200]	@ (8002b7c <HAL_DMA_IRQHandler+0x200>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00a      	beq.n	8002acc <HAL_DMA_IRQHandler+0x150>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a31      	ldr	r2, [pc, #196]	@ (8002b80 <HAL_DMA_IRQHandler+0x204>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d102      	bne.n	8002ac6 <HAL_DMA_IRQHandler+0x14a>
 8002ac0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002ac4:	e00e      	b.n	8002ae4 <HAL_DMA_IRQHandler+0x168>
 8002ac6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aca:	e00b      	b.n	8002ae4 <HAL_DMA_IRQHandler+0x168>
 8002acc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ad0:	e008      	b.n	8002ae4 <HAL_DMA_IRQHandler+0x168>
 8002ad2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ad6:	e005      	b.n	8002ae4 <HAL_DMA_IRQHandler+0x168>
 8002ad8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002adc:	e002      	b.n	8002ae4 <HAL_DMA_IRQHandler+0x168>
 8002ade:	2320      	movs	r3, #32
 8002ae0:	e000      	b.n	8002ae4 <HAL_DMA_IRQHandler+0x168>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	4a27      	ldr	r2, [pc, #156]	@ (8002b84 <HAL_DMA_IRQHandler+0x208>)
 8002ae6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d034      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b00:	e02f      	b.n	8002b62 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	2208      	movs	r2, #8
 8002b08:	409a      	lsls	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d028      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x1e8>
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d023      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 020e 	bic.w	r2, r2, #14
 8002b2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b34:	2101      	movs	r1, #1
 8002b36:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d004      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	4798      	blx	r3
    }
  }
  return;
 8002b62:	bf00      	nop
 8002b64:	bf00      	nop
}
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40020008 	.word	0x40020008
 8002b70:	4002001c 	.word	0x4002001c
 8002b74:	40020030 	.word	0x40020030
 8002b78:	40020044 	.word	0x40020044
 8002b7c:	40020058 	.word	0x40020058
 8002b80:	4002006c 	.word	0x4002006c
 8002b84:	40020000 	.word	0x40020000

08002b88 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
 8002b94:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b10      	cmp	r3, #16
 8002bb4:	d108      	bne.n	8002bc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bc6:	e007      	b.n	8002bd8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	60da      	str	r2, [r3, #12]
}
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr
	...

08002be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b08b      	sub	sp, #44	@ 0x2c
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bf6:	e169      	b.n	8002ecc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	f040 8158 	bne.w	8002ec6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4a9a      	ldr	r2, [pc, #616]	@ (8002e84 <HAL_GPIO_Init+0x2a0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d05e      	beq.n	8002cde <HAL_GPIO_Init+0xfa>
 8002c20:	4a98      	ldr	r2, [pc, #608]	@ (8002e84 <HAL_GPIO_Init+0x2a0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d875      	bhi.n	8002d12 <HAL_GPIO_Init+0x12e>
 8002c26:	4a98      	ldr	r2, [pc, #608]	@ (8002e88 <HAL_GPIO_Init+0x2a4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d058      	beq.n	8002cde <HAL_GPIO_Init+0xfa>
 8002c2c:	4a96      	ldr	r2, [pc, #600]	@ (8002e88 <HAL_GPIO_Init+0x2a4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d86f      	bhi.n	8002d12 <HAL_GPIO_Init+0x12e>
 8002c32:	4a96      	ldr	r2, [pc, #600]	@ (8002e8c <HAL_GPIO_Init+0x2a8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d052      	beq.n	8002cde <HAL_GPIO_Init+0xfa>
 8002c38:	4a94      	ldr	r2, [pc, #592]	@ (8002e8c <HAL_GPIO_Init+0x2a8>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d869      	bhi.n	8002d12 <HAL_GPIO_Init+0x12e>
 8002c3e:	4a94      	ldr	r2, [pc, #592]	@ (8002e90 <HAL_GPIO_Init+0x2ac>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d04c      	beq.n	8002cde <HAL_GPIO_Init+0xfa>
 8002c44:	4a92      	ldr	r2, [pc, #584]	@ (8002e90 <HAL_GPIO_Init+0x2ac>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d863      	bhi.n	8002d12 <HAL_GPIO_Init+0x12e>
 8002c4a:	4a92      	ldr	r2, [pc, #584]	@ (8002e94 <HAL_GPIO_Init+0x2b0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d046      	beq.n	8002cde <HAL_GPIO_Init+0xfa>
 8002c50:	4a90      	ldr	r2, [pc, #576]	@ (8002e94 <HAL_GPIO_Init+0x2b0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d85d      	bhi.n	8002d12 <HAL_GPIO_Init+0x12e>
 8002c56:	2b12      	cmp	r3, #18
 8002c58:	d82a      	bhi.n	8002cb0 <HAL_GPIO_Init+0xcc>
 8002c5a:	2b12      	cmp	r3, #18
 8002c5c:	d859      	bhi.n	8002d12 <HAL_GPIO_Init+0x12e>
 8002c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c64 <HAL_GPIO_Init+0x80>)
 8002c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c64:	08002cdf 	.word	0x08002cdf
 8002c68:	08002cb9 	.word	0x08002cb9
 8002c6c:	08002ccb 	.word	0x08002ccb
 8002c70:	08002d0d 	.word	0x08002d0d
 8002c74:	08002d13 	.word	0x08002d13
 8002c78:	08002d13 	.word	0x08002d13
 8002c7c:	08002d13 	.word	0x08002d13
 8002c80:	08002d13 	.word	0x08002d13
 8002c84:	08002d13 	.word	0x08002d13
 8002c88:	08002d13 	.word	0x08002d13
 8002c8c:	08002d13 	.word	0x08002d13
 8002c90:	08002d13 	.word	0x08002d13
 8002c94:	08002d13 	.word	0x08002d13
 8002c98:	08002d13 	.word	0x08002d13
 8002c9c:	08002d13 	.word	0x08002d13
 8002ca0:	08002d13 	.word	0x08002d13
 8002ca4:	08002d13 	.word	0x08002d13
 8002ca8:	08002cc1 	.word	0x08002cc1
 8002cac:	08002cd5 	.word	0x08002cd5
 8002cb0:	4a79      	ldr	r2, [pc, #484]	@ (8002e98 <HAL_GPIO_Init+0x2b4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d013      	beq.n	8002cde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002cb6:	e02c      	b.n	8002d12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	623b      	str	r3, [r7, #32]
          break;
 8002cbe:	e029      	b.n	8002d14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	623b      	str	r3, [r7, #32]
          break;
 8002cc8:	e024      	b.n	8002d14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	3308      	adds	r3, #8
 8002cd0:	623b      	str	r3, [r7, #32]
          break;
 8002cd2:	e01f      	b.n	8002d14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	330c      	adds	r3, #12
 8002cda:	623b      	str	r3, [r7, #32]
          break;
 8002cdc:	e01a      	b.n	8002d14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	623b      	str	r3, [r7, #32]
          break;
 8002cea:	e013      	b.n	8002d14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d105      	bne.n	8002d00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cf4:	2308      	movs	r3, #8
 8002cf6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69fa      	ldr	r2, [r7, #28]
 8002cfc:	611a      	str	r2, [r3, #16]
          break;
 8002cfe:	e009      	b.n	8002d14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d00:	2308      	movs	r3, #8
 8002d02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	615a      	str	r2, [r3, #20]
          break;
 8002d0a:	e003      	b.n	8002d14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	623b      	str	r3, [r7, #32]
          break;
 8002d10:	e000      	b.n	8002d14 <HAL_GPIO_Init+0x130>
          break;
 8002d12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2bff      	cmp	r3, #255	@ 0xff
 8002d18:	d801      	bhi.n	8002d1e <HAL_GPIO_Init+0x13a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	e001      	b.n	8002d22 <HAL_GPIO_Init+0x13e>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3304      	adds	r3, #4
 8002d22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	2bff      	cmp	r3, #255	@ 0xff
 8002d28:	d802      	bhi.n	8002d30 <HAL_GPIO_Init+0x14c>
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	e002      	b.n	8002d36 <HAL_GPIO_Init+0x152>
 8002d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d32:	3b08      	subs	r3, #8
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	210f      	movs	r1, #15
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	fa01 f303 	lsl.w	r3, r1, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	401a      	ands	r2, r3
 8002d48:	6a39      	ldr	r1, [r7, #32]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d50:	431a      	orrs	r2, r3
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 80b1 	beq.w	8002ec6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d64:	4b4d      	ldr	r3, [pc, #308]	@ (8002e9c <HAL_GPIO_Init+0x2b8>)
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	4a4c      	ldr	r2, [pc, #304]	@ (8002e9c <HAL_GPIO_Init+0x2b8>)
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6193      	str	r3, [r2, #24]
 8002d70:	4b4a      	ldr	r3, [pc, #296]	@ (8002e9c <HAL_GPIO_Init+0x2b8>)
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d7c:	4a48      	ldr	r2, [pc, #288]	@ (8002ea0 <HAL_GPIO_Init+0x2bc>)
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	089b      	lsrs	r3, r3, #2
 8002d82:	3302      	adds	r3, #2
 8002d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	220f      	movs	r2, #15
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a40      	ldr	r2, [pc, #256]	@ (8002ea4 <HAL_GPIO_Init+0x2c0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d013      	beq.n	8002dd0 <HAL_GPIO_Init+0x1ec>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a3f      	ldr	r2, [pc, #252]	@ (8002ea8 <HAL_GPIO_Init+0x2c4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d00d      	beq.n	8002dcc <HAL_GPIO_Init+0x1e8>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a3e      	ldr	r2, [pc, #248]	@ (8002eac <HAL_GPIO_Init+0x2c8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d007      	beq.n	8002dc8 <HAL_GPIO_Init+0x1e4>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a3d      	ldr	r2, [pc, #244]	@ (8002eb0 <HAL_GPIO_Init+0x2cc>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d101      	bne.n	8002dc4 <HAL_GPIO_Init+0x1e0>
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e006      	b.n	8002dd2 <HAL_GPIO_Init+0x1ee>
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	e004      	b.n	8002dd2 <HAL_GPIO_Init+0x1ee>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e002      	b.n	8002dd2 <HAL_GPIO_Init+0x1ee>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <HAL_GPIO_Init+0x1ee>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd4:	f002 0203 	and.w	r2, r2, #3
 8002dd8:	0092      	lsls	r2, r2, #2
 8002dda:	4093      	lsls	r3, r2
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002de2:	492f      	ldr	r1, [pc, #188]	@ (8002ea0 <HAL_GPIO_Init+0x2bc>)
 8002de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de6:	089b      	lsrs	r3, r3, #2
 8002de8:	3302      	adds	r3, #2
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d006      	beq.n	8002e0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002dfc:	4b2d      	ldr	r3, [pc, #180]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	492c      	ldr	r1, [pc, #176]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	608b      	str	r3, [r1, #8]
 8002e08:	e006      	b.n	8002e18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	43db      	mvns	r3, r3
 8002e12:	4928      	ldr	r1, [pc, #160]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d006      	beq.n	8002e32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e24:	4b23      	ldr	r3, [pc, #140]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	4922      	ldr	r1, [pc, #136]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60cb      	str	r3, [r1, #12]
 8002e30:	e006      	b.n	8002e40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e32:	4b20      	ldr	r3, [pc, #128]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	491e      	ldr	r1, [pc, #120]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d006      	beq.n	8002e5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e4c:	4b19      	ldr	r3, [pc, #100]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	4918      	ldr	r1, [pc, #96]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
 8002e58:	e006      	b.n	8002e68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e5a:	4b16      	ldr	r3, [pc, #88]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	4914      	ldr	r1, [pc, #80]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d021      	beq.n	8002eb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e74:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	490e      	ldr	r1, [pc, #56]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	600b      	str	r3, [r1, #0]
 8002e80:	e021      	b.n	8002ec6 <HAL_GPIO_Init+0x2e2>
 8002e82:	bf00      	nop
 8002e84:	10320000 	.word	0x10320000
 8002e88:	10310000 	.word	0x10310000
 8002e8c:	10220000 	.word	0x10220000
 8002e90:	10210000 	.word	0x10210000
 8002e94:	10120000 	.word	0x10120000
 8002e98:	10110000 	.word	0x10110000
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40010000 	.word	0x40010000
 8002ea4:	40010800 	.word	0x40010800
 8002ea8:	40010c00 	.word	0x40010c00
 8002eac:	40011000 	.word	0x40011000
 8002eb0:	40011400 	.word	0x40011400
 8002eb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee8 <HAL_GPIO_Init+0x304>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	4909      	ldr	r1, [pc, #36]	@ (8002ee8 <HAL_GPIO_Init+0x304>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	3301      	adds	r3, #1
 8002eca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f47f ae8e 	bne.w	8002bf8 <HAL_GPIO_Init+0x14>
  }
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	372c      	adds	r7, #44	@ 0x2c
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr
 8002ee8:	40010400 	.word	0x40010400

08002eec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	887b      	ldrh	r3, [r7, #2]
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
 8002f08:	e001      	b.n	8002f0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr

08002f1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	460b      	mov	r3, r1
 8002f24:	807b      	strh	r3, [r7, #2]
 8002f26:	4613      	mov	r3, r2
 8002f28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f2a:	787b      	ldrb	r3, [r7, #1]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f30:	887a      	ldrh	r2, [r7, #2]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f36:	e003      	b.n	8002f40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f38:	887b      	ldrh	r3, [r7, #2]
 8002f3a:	041a      	lsls	r2, r3, #16
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	611a      	str	r2, [r3, #16]
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr
	...

08002f4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e272      	b.n	8003444 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 8087 	beq.w	800307a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f6c:	4b92      	ldr	r3, [pc, #584]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 030c 	and.w	r3, r3, #12
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d00c      	beq.n	8002f92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f78:	4b8f      	ldr	r3, [pc, #572]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 030c 	and.w	r3, r3, #12
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d112      	bne.n	8002faa <HAL_RCC_OscConfig+0x5e>
 8002f84:	4b8c      	ldr	r3, [pc, #560]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f90:	d10b      	bne.n	8002faa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f92:	4b89      	ldr	r3, [pc, #548]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d06c      	beq.n	8003078 <HAL_RCC_OscConfig+0x12c>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d168      	bne.n	8003078 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e24c      	b.n	8003444 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fb2:	d106      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x76>
 8002fb4:	4b80      	ldr	r3, [pc, #512]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a7f      	ldr	r2, [pc, #508]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 8002fba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	e02e      	b.n	8003020 <HAL_RCC_OscConfig+0xd4>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x98>
 8002fca:	4b7b      	ldr	r3, [pc, #492]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a7a      	ldr	r2, [pc, #488]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	4b78      	ldr	r3, [pc, #480]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a77      	ldr	r2, [pc, #476]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	e01d      	b.n	8003020 <HAL_RCC_OscConfig+0xd4>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fec:	d10c      	bne.n	8003008 <HAL_RCC_OscConfig+0xbc>
 8002fee:	4b72      	ldr	r3, [pc, #456]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a71      	ldr	r2, [pc, #452]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	4b6f      	ldr	r3, [pc, #444]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a6e      	ldr	r2, [pc, #440]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 8003000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	e00b      	b.n	8003020 <HAL_RCC_OscConfig+0xd4>
 8003008:	4b6b      	ldr	r3, [pc, #428]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a6a      	ldr	r2, [pc, #424]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 800300e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	4b68      	ldr	r3, [pc, #416]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a67      	ldr	r2, [pc, #412]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 800301a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800301e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d013      	beq.n	8003050 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7fe ff0a 	bl	8001e40 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003030:	f7fe ff06 	bl	8001e40 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b64      	cmp	r3, #100	@ 0x64
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e200      	b.n	8003444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003042:	4b5d      	ldr	r3, [pc, #372]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCC_OscConfig+0xe4>
 800304e:	e014      	b.n	800307a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003050:	f7fe fef6 	bl	8001e40 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003058:	f7fe fef2 	bl	8001e40 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b64      	cmp	r3, #100	@ 0x64
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e1ec      	b.n	8003444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306a:	4b53      	ldr	r3, [pc, #332]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x10c>
 8003076:	e000      	b.n	800307a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d063      	beq.n	800314e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003086:	4b4c      	ldr	r3, [pc, #304]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00b      	beq.n	80030aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003092:	4b49      	ldr	r3, [pc, #292]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	2b08      	cmp	r3, #8
 800309c:	d11c      	bne.n	80030d8 <HAL_RCC_OscConfig+0x18c>
 800309e:	4b46      	ldr	r3, [pc, #280]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d116      	bne.n	80030d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030aa:	4b43      	ldr	r3, [pc, #268]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d005      	beq.n	80030c2 <HAL_RCC_OscConfig+0x176>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d001      	beq.n	80030c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e1c0      	b.n	8003444 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c2:	4b3d      	ldr	r3, [pc, #244]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4939      	ldr	r1, [pc, #228]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030d6:	e03a      	b.n	800314e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d020      	beq.n	8003122 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e0:	4b36      	ldr	r3, [pc, #216]	@ (80031bc <HAL_RCC_OscConfig+0x270>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e6:	f7fe feab 	bl	8001e40 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ee:	f7fe fea7 	bl	8001e40 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e1a1      	b.n	8003444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003100:	4b2d      	ldr	r3, [pc, #180]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310c:	4b2a      	ldr	r3, [pc, #168]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4927      	ldr	r1, [pc, #156]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 800311c:	4313      	orrs	r3, r2
 800311e:	600b      	str	r3, [r1, #0]
 8003120:	e015      	b.n	800314e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003122:	4b26      	ldr	r3, [pc, #152]	@ (80031bc <HAL_RCC_OscConfig+0x270>)
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7fe fe8a 	bl	8001e40 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003130:	f7fe fe86 	bl	8001e40 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e180      	b.n	8003444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003142:	4b1d      	ldr	r3, [pc, #116]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d03a      	beq.n	80031d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d019      	beq.n	8003196 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003162:	4b17      	ldr	r3, [pc, #92]	@ (80031c0 <HAL_RCC_OscConfig+0x274>)
 8003164:	2201      	movs	r2, #1
 8003166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003168:	f7fe fe6a 	bl	8001e40 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003170:	f7fe fe66 	bl	8001e40 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e160      	b.n	8003444 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003182:	4b0d      	ldr	r3, [pc, #52]	@ (80031b8 <HAL_RCC_OscConfig+0x26c>)
 8003184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800318e:	2001      	movs	r0, #1
 8003190:	f000 fa9e 	bl	80036d0 <RCC_Delay>
 8003194:	e01c      	b.n	80031d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003196:	4b0a      	ldr	r3, [pc, #40]	@ (80031c0 <HAL_RCC_OscConfig+0x274>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319c:	f7fe fe50 	bl	8001e40 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a2:	e00f      	b.n	80031c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031a4:	f7fe fe4c 	bl	8001e40 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d908      	bls.n	80031c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e146      	b.n	8003444 <HAL_RCC_OscConfig+0x4f8>
 80031b6:	bf00      	nop
 80031b8:	40021000 	.word	0x40021000
 80031bc:	42420000 	.word	0x42420000
 80031c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c4:	4b92      	ldr	r3, [pc, #584]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 80031c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1e9      	bne.n	80031a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 80a6 	beq.w	800332a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031de:	2300      	movs	r3, #0
 80031e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031e2:	4b8b      	ldr	r3, [pc, #556]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10d      	bne.n	800320a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ee:	4b88      	ldr	r3, [pc, #544]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	4a87      	ldr	r2, [pc, #540]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 80031f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031f8:	61d3      	str	r3, [r2, #28]
 80031fa:	4b85      	ldr	r3, [pc, #532]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003206:	2301      	movs	r3, #1
 8003208:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320a:	4b82      	ldr	r3, [pc, #520]	@ (8003414 <HAL_RCC_OscConfig+0x4c8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003212:	2b00      	cmp	r3, #0
 8003214:	d118      	bne.n	8003248 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003216:	4b7f      	ldr	r3, [pc, #508]	@ (8003414 <HAL_RCC_OscConfig+0x4c8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a7e      	ldr	r2, [pc, #504]	@ (8003414 <HAL_RCC_OscConfig+0x4c8>)
 800321c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003222:	f7fe fe0d 	bl	8001e40 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322a:	f7fe fe09 	bl	8001e40 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b64      	cmp	r3, #100	@ 0x64
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e103      	b.n	8003444 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323c:	4b75      	ldr	r3, [pc, #468]	@ (8003414 <HAL_RCC_OscConfig+0x4c8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0f0      	beq.n	800322a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d106      	bne.n	800325e <HAL_RCC_OscConfig+0x312>
 8003250:	4b6f      	ldr	r3, [pc, #444]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	4a6e      	ldr	r2, [pc, #440]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	6213      	str	r3, [r2, #32]
 800325c:	e02d      	b.n	80032ba <HAL_RCC_OscConfig+0x36e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10c      	bne.n	8003280 <HAL_RCC_OscConfig+0x334>
 8003266:	4b6a      	ldr	r3, [pc, #424]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	4a69      	ldr	r2, [pc, #420]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 800326c:	f023 0301 	bic.w	r3, r3, #1
 8003270:	6213      	str	r3, [r2, #32]
 8003272:	4b67      	ldr	r3, [pc, #412]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	4a66      	ldr	r2, [pc, #408]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 8003278:	f023 0304 	bic.w	r3, r3, #4
 800327c:	6213      	str	r3, [r2, #32]
 800327e:	e01c      	b.n	80032ba <HAL_RCC_OscConfig+0x36e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	2b05      	cmp	r3, #5
 8003286:	d10c      	bne.n	80032a2 <HAL_RCC_OscConfig+0x356>
 8003288:	4b61      	ldr	r3, [pc, #388]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	4a60      	ldr	r2, [pc, #384]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 800328e:	f043 0304 	orr.w	r3, r3, #4
 8003292:	6213      	str	r3, [r2, #32]
 8003294:	4b5e      	ldr	r3, [pc, #376]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	4a5d      	ldr	r2, [pc, #372]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	6213      	str	r3, [r2, #32]
 80032a0:	e00b      	b.n	80032ba <HAL_RCC_OscConfig+0x36e>
 80032a2:	4b5b      	ldr	r3, [pc, #364]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	4a5a      	ldr	r2, [pc, #360]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 80032a8:	f023 0301 	bic.w	r3, r3, #1
 80032ac:	6213      	str	r3, [r2, #32]
 80032ae:	4b58      	ldr	r3, [pc, #352]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	4a57      	ldr	r2, [pc, #348]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 80032b4:	f023 0304 	bic.w	r3, r3, #4
 80032b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d015      	beq.n	80032ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c2:	f7fe fdbd 	bl	8001e40 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c8:	e00a      	b.n	80032e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ca:	f7fe fdb9 	bl	8001e40 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d8:	4293      	cmp	r3, r2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e0b1      	b.n	8003444 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0ee      	beq.n	80032ca <HAL_RCC_OscConfig+0x37e>
 80032ec:	e014      	b.n	8003318 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ee:	f7fe fda7 	bl	8001e40 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f4:	e00a      	b.n	800330c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f6:	f7fe fda3 	bl	8001e40 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003304:	4293      	cmp	r3, r2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e09b      	b.n	8003444 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800330c:	4b40      	ldr	r3, [pc, #256]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1ee      	bne.n	80032f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003318:	7dfb      	ldrb	r3, [r7, #23]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d105      	bne.n	800332a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800331e:	4b3c      	ldr	r3, [pc, #240]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	4a3b      	ldr	r2, [pc, #236]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003328:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 8087 	beq.w	8003442 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003334:	4b36      	ldr	r3, [pc, #216]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 030c 	and.w	r3, r3, #12
 800333c:	2b08      	cmp	r3, #8
 800333e:	d061      	beq.n	8003404 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	2b02      	cmp	r3, #2
 8003346:	d146      	bne.n	80033d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003348:	4b33      	ldr	r3, [pc, #204]	@ (8003418 <HAL_RCC_OscConfig+0x4cc>)
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334e:	f7fe fd77 	bl	8001e40 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003356:	f7fe fd73 	bl	8001e40 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e06d      	b.n	8003444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003368:	4b29      	ldr	r3, [pc, #164]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1f0      	bne.n	8003356 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800337c:	d108      	bne.n	8003390 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800337e:	4b24      	ldr	r3, [pc, #144]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	4921      	ldr	r1, [pc, #132]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 800338c:	4313      	orrs	r3, r2
 800338e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003390:	4b1f      	ldr	r3, [pc, #124]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a19      	ldr	r1, [r3, #32]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a0:	430b      	orrs	r3, r1
 80033a2:	491b      	ldr	r1, [pc, #108]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003418 <HAL_RCC_OscConfig+0x4cc>)
 80033aa:	2201      	movs	r2, #1
 80033ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ae:	f7fe fd47 	bl	8001e40 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b6:	f7fe fd43 	bl	8001e40 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e03d      	b.n	8003444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033c8:	4b11      	ldr	r3, [pc, #68]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0f0      	beq.n	80033b6 <HAL_RCC_OscConfig+0x46a>
 80033d4:	e035      	b.n	8003442 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d6:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <HAL_RCC_OscConfig+0x4cc>)
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033dc:	f7fe fd30 	bl	8001e40 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e4:	f7fe fd2c 	bl	8001e40 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e026      	b.n	8003444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f6:	4b06      	ldr	r3, [pc, #24]	@ (8003410 <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x498>
 8003402:	e01e      	b.n	8003442 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d107      	bne.n	800341c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e019      	b.n	8003444 <HAL_RCC_OscConfig+0x4f8>
 8003410:	40021000 	.word	0x40021000
 8003414:	40007000 	.word	0x40007000
 8003418:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800341c:	4b0b      	ldr	r3, [pc, #44]	@ (800344c <HAL_RCC_OscConfig+0x500>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	429a      	cmp	r2, r3
 800342e:	d106      	bne.n	800343e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343a:	429a      	cmp	r2, r3
 800343c:	d001      	beq.n	8003442 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40021000 	.word	0x40021000

08003450 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0d0      	b.n	8003606 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003464:	4b6a      	ldr	r3, [pc, #424]	@ (8003610 <HAL_RCC_ClockConfig+0x1c0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d910      	bls.n	8003494 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003472:	4b67      	ldr	r3, [pc, #412]	@ (8003610 <HAL_RCC_ClockConfig+0x1c0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 0207 	bic.w	r2, r3, #7
 800347a:	4965      	ldr	r1, [pc, #404]	@ (8003610 <HAL_RCC_ClockConfig+0x1c0>)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	4313      	orrs	r3, r2
 8003480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003482:	4b63      	ldr	r3, [pc, #396]	@ (8003610 <HAL_RCC_ClockConfig+0x1c0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d001      	beq.n	8003494 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e0b8      	b.n	8003606 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d020      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034ac:	4b59      	ldr	r3, [pc, #356]	@ (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	4a58      	ldr	r2, [pc, #352]	@ (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 80034b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80034b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034c4:	4b53      	ldr	r3, [pc, #332]	@ (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	4a52      	ldr	r2, [pc, #328]	@ (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 80034ca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80034ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d0:	4b50      	ldr	r3, [pc, #320]	@ (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	494d      	ldr	r1, [pc, #308]	@ (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d040      	beq.n	8003570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d107      	bne.n	8003506 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f6:	4b47      	ldr	r3, [pc, #284]	@ (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d115      	bne.n	800352e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e07f      	b.n	8003606 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d107      	bne.n	800351e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350e:	4b41      	ldr	r3, [pc, #260]	@ (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e073      	b.n	8003606 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351e:	4b3d      	ldr	r3, [pc, #244]	@ (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e06b      	b.n	8003606 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800352e:	4b39      	ldr	r3, [pc, #228]	@ (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f023 0203 	bic.w	r2, r3, #3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	4936      	ldr	r1, [pc, #216]	@ (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 800353c:	4313      	orrs	r3, r2
 800353e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003540:	f7fe fc7e 	bl	8001e40 <HAL_GetTick>
 8003544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003546:	e00a      	b.n	800355e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003548:	f7fe fc7a 	bl	8001e40 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003556:	4293      	cmp	r3, r2
 8003558:	d901      	bls.n	800355e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e053      	b.n	8003606 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800355e:	4b2d      	ldr	r3, [pc, #180]	@ (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 020c 	and.w	r2, r3, #12
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	429a      	cmp	r2, r3
 800356e:	d1eb      	bne.n	8003548 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003570:	4b27      	ldr	r3, [pc, #156]	@ (8003610 <HAL_RCC_ClockConfig+0x1c0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d210      	bcs.n	80035a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357e:	4b24      	ldr	r3, [pc, #144]	@ (8003610 <HAL_RCC_ClockConfig+0x1c0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 0207 	bic.w	r2, r3, #7
 8003586:	4922      	ldr	r1, [pc, #136]	@ (8003610 <HAL_RCC_ClockConfig+0x1c0>)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	4313      	orrs	r3, r2
 800358c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800358e:	4b20      	ldr	r3, [pc, #128]	@ (8003610 <HAL_RCC_ClockConfig+0x1c0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d001      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e032      	b.n	8003606 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d008      	beq.n	80035be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035ac:	4b19      	ldr	r3, [pc, #100]	@ (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	4916      	ldr	r1, [pc, #88]	@ (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d009      	beq.n	80035de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035ca:	4b12      	ldr	r3, [pc, #72]	@ (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	490e      	ldr	r1, [pc, #56]	@ (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035de:	f000 f821 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 80035e2:	4602      	mov	r2, r0
 80035e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	091b      	lsrs	r3, r3, #4
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	490a      	ldr	r1, [pc, #40]	@ (8003618 <HAL_RCC_ClockConfig+0x1c8>)
 80035f0:	5ccb      	ldrb	r3, [r1, r3]
 80035f2:	fa22 f303 	lsr.w	r3, r2, r3
 80035f6:	4a09      	ldr	r2, [pc, #36]	@ (800361c <HAL_RCC_ClockConfig+0x1cc>)
 80035f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035fa:	4b09      	ldr	r3, [pc, #36]	@ (8003620 <HAL_RCC_ClockConfig+0x1d0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fe fbdc 	bl	8001dbc <HAL_InitTick>

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40022000 	.word	0x40022000
 8003614:	40021000 	.word	0x40021000
 8003618:	08004840 	.word	0x08004840
 800361c:	20000000 	.word	0x20000000
 8003620:	20000004 	.word	0x20000004

08003624 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	2300      	movs	r3, #0
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	2300      	movs	r3, #0
 8003638:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800363e:	4b1e      	ldr	r3, [pc, #120]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	2b04      	cmp	r3, #4
 800364c:	d002      	beq.n	8003654 <HAL_RCC_GetSysClockFreq+0x30>
 800364e:	2b08      	cmp	r3, #8
 8003650:	d003      	beq.n	800365a <HAL_RCC_GetSysClockFreq+0x36>
 8003652:	e027      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003654:	4b19      	ldr	r3, [pc, #100]	@ (80036bc <HAL_RCC_GetSysClockFreq+0x98>)
 8003656:	613b      	str	r3, [r7, #16]
      break;
 8003658:	e027      	b.n	80036aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	0c9b      	lsrs	r3, r3, #18
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	4a17      	ldr	r2, [pc, #92]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003664:	5cd3      	ldrb	r3, [r2, r3]
 8003666:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d010      	beq.n	8003694 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003672:	4b11      	ldr	r3, [pc, #68]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	0c5b      	lsrs	r3, r3, #17
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	4a11      	ldr	r2, [pc, #68]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800367e:	5cd3      	ldrb	r3, [r2, r3]
 8003680:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a0d      	ldr	r2, [pc, #52]	@ (80036bc <HAL_RCC_GetSysClockFreq+0x98>)
 8003686:	fb03 f202 	mul.w	r2, r3, r2
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	e004      	b.n	800369e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a0c      	ldr	r2, [pc, #48]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003698:	fb02 f303 	mul.w	r3, r2, r3
 800369c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	613b      	str	r3, [r7, #16]
      break;
 80036a2:	e002      	b.n	80036aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036a4:	4b09      	ldr	r3, [pc, #36]	@ (80036cc <HAL_RCC_GetSysClockFreq+0xa8>)
 80036a6:	613b      	str	r3, [r7, #16]
      break;
 80036a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036aa:	693b      	ldr	r3, [r7, #16]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	371c      	adds	r7, #28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40021000 	.word	0x40021000
 80036bc:	00f42400 	.word	0x00f42400
 80036c0:	08004850 	.word	0x08004850
 80036c4:	08004860 	.word	0x08004860
 80036c8:	003d0900 	.word	0x003d0900
 80036cc:	007a1200 	.word	0x007a1200

080036d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003704 <RCC_Delay+0x34>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003708 <RCC_Delay+0x38>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	0a5b      	lsrs	r3, r3, #9
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	fb02 f303 	mul.w	r3, r2, r3
 80036ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036ec:	bf00      	nop
  }
  while (Delay --);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	1e5a      	subs	r2, r3, #1
 80036f2:	60fa      	str	r2, [r7, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f9      	bne.n	80036ec <RCC_Delay+0x1c>
}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr
 8003704:	20000000 	.word	0x20000000
 8003708:	10624dd3 	.word	0x10624dd3

0800370c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	613b      	str	r3, [r7, #16]
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	d07d      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003728:	2300      	movs	r3, #0
 800372a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800372c:	4b4f      	ldr	r3, [pc, #316]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10d      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003738:	4b4c      	ldr	r3, [pc, #304]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	4a4b      	ldr	r2, [pc, #300]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003742:	61d3      	str	r3, [r2, #28]
 8003744:	4b49      	ldr	r3, [pc, #292]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003750:	2301      	movs	r3, #1
 8003752:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003754:	4b46      	ldr	r3, [pc, #280]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d118      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003760:	4b43      	ldr	r3, [pc, #268]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a42      	ldr	r2, [pc, #264]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003766:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800376a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800376c:	f7fe fb68 	bl	8001e40 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003772:	e008      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003774:	f7fe fb64 	bl	8001e40 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	@ 0x64
 8003780:	d901      	bls.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e06d      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003786:	4b3a      	ldr	r3, [pc, #232]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003792:	4b36      	ldr	r3, [pc, #216]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800379a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d02e      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d027      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037b0:	4b2e      	ldr	r3, [pc, #184]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037ba:	4b2e      	ldr	r3, [pc, #184]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037bc:	2201      	movs	r2, #1
 80037be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037c0:	4b2c      	ldr	r3, [pc, #176]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037c6:	4a29      	ldr	r2, [pc, #164]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d014      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d6:	f7fe fb33 	bl	8001e40 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037dc:	e00a      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037de:	f7fe fb2f 	bl	8001e40 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e036      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f4:	4b1d      	ldr	r3, [pc, #116]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0ee      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003800:	4b1a      	ldr	r3, [pc, #104]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4917      	ldr	r1, [pc, #92]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380e:	4313      	orrs	r3, r2
 8003810:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003812:	7dfb      	ldrb	r3, [r7, #23]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d105      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003818:	4b14      	ldr	r3, [pc, #80]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	4a13      	ldr	r2, [pc, #76]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003822:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003830:	4b0e      	ldr	r3, [pc, #56]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	490b      	ldr	r1, [pc, #44]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383e:	4313      	orrs	r3, r2
 8003840:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	2b00      	cmp	r3, #0
 800384c:	d008      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800384e:	4b07      	ldr	r3, [pc, #28]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	4904      	ldr	r1, [pc, #16]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40021000 	.word	0x40021000
 8003870:	40007000 	.word	0x40007000
 8003874:	42420440 	.word	0x42420440

08003878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e041      	b.n	800390e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fe f91a 	bl	8001ad8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3304      	adds	r3, #4
 80038b4:	4619      	mov	r1, r3
 80038b6:	4610      	mov	r0, r2
 80038b8:	f000 fc18 	bl	80040ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b01      	cmp	r3, #1
 800392a:	d001      	beq.n	8003930 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e03a      	b.n	80039a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a18      	ldr	r2, [pc, #96]	@ (80039b0 <HAL_TIM_Base_Start_IT+0x98>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00e      	beq.n	8003970 <HAL_TIM_Base_Start_IT+0x58>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800395a:	d009      	beq.n	8003970 <HAL_TIM_Base_Start_IT+0x58>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a14      	ldr	r2, [pc, #80]	@ (80039b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d004      	beq.n	8003970 <HAL_TIM_Base_Start_IT+0x58>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a13      	ldr	r2, [pc, #76]	@ (80039b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d111      	bne.n	8003994 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b06      	cmp	r3, #6
 8003980:	d010      	beq.n	80039a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0201 	orr.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003992:	e007      	b.n	80039a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr
 80039b0:	40012c00 	.word	0x40012c00
 80039b4:	40000400 	.word	0x40000400
 80039b8:	40000800 	.word	0x40000800

080039bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e041      	b.n	8003a52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d106      	bne.n	80039e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f839 	bl	8003a5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3304      	adds	r3, #4
 80039f8:	4619      	mov	r1, r3
 80039fa:	4610      	mov	r0, r2
 80039fc:	f000 fb76 	bl	80040ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr

08003a6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d109      	bne.n	8003a90 <HAL_TIM_PWM_Start+0x24>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	bf14      	ite	ne
 8003a88:	2301      	movne	r3, #1
 8003a8a:	2300      	moveq	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	e022      	b.n	8003ad6 <HAL_TIM_PWM_Start+0x6a>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d109      	bne.n	8003aaa <HAL_TIM_PWM_Start+0x3e>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	bf14      	ite	ne
 8003aa2:	2301      	movne	r3, #1
 8003aa4:	2300      	moveq	r3, #0
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	e015      	b.n	8003ad6 <HAL_TIM_PWM_Start+0x6a>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d109      	bne.n	8003ac4 <HAL_TIM_PWM_Start+0x58>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	bf14      	ite	ne
 8003abc:	2301      	movne	r3, #1
 8003abe:	2300      	moveq	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	e008      	b.n	8003ad6 <HAL_TIM_PWM_Start+0x6a>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	bf14      	ite	ne
 8003ad0:	2301      	movne	r3, #1
 8003ad2:	2300      	moveq	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e05e      	b.n	8003b9c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d104      	bne.n	8003aee <HAL_TIM_PWM_Start+0x82>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003aec:	e013      	b.n	8003b16 <HAL_TIM_PWM_Start+0xaa>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d104      	bne.n	8003afe <HAL_TIM_PWM_Start+0x92>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003afc:	e00b      	b.n	8003b16 <HAL_TIM_PWM_Start+0xaa>
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d104      	bne.n	8003b0e <HAL_TIM_PWM_Start+0xa2>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b0c:	e003      	b.n	8003b16 <HAL_TIM_PWM_Start+0xaa>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2202      	movs	r2, #2
 8003b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	6839      	ldr	r1, [r7, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fd70 	bl	8004604 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1e      	ldr	r2, [pc, #120]	@ (8003ba4 <HAL_TIM_PWM_Start+0x138>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d107      	bne.n	8003b3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a18      	ldr	r2, [pc, #96]	@ (8003ba4 <HAL_TIM_PWM_Start+0x138>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00e      	beq.n	8003b66 <HAL_TIM_PWM_Start+0xfa>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b50:	d009      	beq.n	8003b66 <HAL_TIM_PWM_Start+0xfa>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a14      	ldr	r2, [pc, #80]	@ (8003ba8 <HAL_TIM_PWM_Start+0x13c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d004      	beq.n	8003b66 <HAL_TIM_PWM_Start+0xfa>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a12      	ldr	r2, [pc, #72]	@ (8003bac <HAL_TIM_PWM_Start+0x140>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d111      	bne.n	8003b8a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2b06      	cmp	r3, #6
 8003b76:	d010      	beq.n	8003b9a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b88:	e007      	b.n	8003b9a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0201 	orr.w	r2, r2, #1
 8003b98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40012c00 	.word	0x40012c00
 8003ba8:	40000400 	.word	0x40000400
 8003bac:	40000800 	.word	0x40000800

08003bb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d020      	beq.n	8003c14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d01b      	beq.n	8003c14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0202 	mvn.w	r2, #2
 8003be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fa5a 	bl	80040b4 <HAL_TIM_IC_CaptureCallback>
 8003c00:	e005      	b.n	8003c0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fa4d 	bl	80040a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fa5c 	bl	80040c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d020      	beq.n	8003c60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d01b      	beq.n	8003c60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f06f 0204 	mvn.w	r2, #4
 8003c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2202      	movs	r2, #2
 8003c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 fa34 	bl	80040b4 <HAL_TIM_IC_CaptureCallback>
 8003c4c:	e005      	b.n	8003c5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fa27 	bl	80040a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 fa36 	bl	80040c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d020      	beq.n	8003cac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01b      	beq.n	8003cac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0208 	mvn.w	r2, #8
 8003c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2204      	movs	r2, #4
 8003c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fa0e 	bl	80040b4 <HAL_TIM_IC_CaptureCallback>
 8003c98:	e005      	b.n	8003ca6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 fa01 	bl	80040a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fa10 	bl	80040c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d020      	beq.n	8003cf8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01b      	beq.n	8003cf8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f06f 0210 	mvn.w	r2, #16
 8003cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2208      	movs	r2, #8
 8003cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f9e8 	bl	80040b4 <HAL_TIM_IC_CaptureCallback>
 8003ce4:	e005      	b.n	8003cf2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f9db 	bl	80040a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f9ea 	bl	80040c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00c      	beq.n	8003d1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d007      	beq.n	8003d1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0201 	mvn.w	r2, #1
 8003d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7fd fe0e 	bl	8001938 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00c      	beq.n	8003d40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d007      	beq.n	8003d40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fd3e 	bl	80047bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00c      	beq.n	8003d64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d007      	beq.n	8003d64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f9ba 	bl	80040d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00c      	beq.n	8003d88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0220 	mvn.w	r2, #32
 8003d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fd11 	bl	80047aa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d88:	bf00      	nop
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e0ae      	b.n	8003f0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b0c      	cmp	r3, #12
 8003dba:	f200 809f 	bhi.w	8003efc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc4:	08003df9 	.word	0x08003df9
 8003dc8:	08003efd 	.word	0x08003efd
 8003dcc:	08003efd 	.word	0x08003efd
 8003dd0:	08003efd 	.word	0x08003efd
 8003dd4:	08003e39 	.word	0x08003e39
 8003dd8:	08003efd 	.word	0x08003efd
 8003ddc:	08003efd 	.word	0x08003efd
 8003de0:	08003efd 	.word	0x08003efd
 8003de4:	08003e7b 	.word	0x08003e7b
 8003de8:	08003efd 	.word	0x08003efd
 8003dec:	08003efd 	.word	0x08003efd
 8003df0:	08003efd 	.word	0x08003efd
 8003df4:	08003ebb 	.word	0x08003ebb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 f9e2 	bl	80041c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699a      	ldr	r2, [r3, #24]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0208 	orr.w	r2, r2, #8
 8003e12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699a      	ldr	r2, [r3, #24]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0204 	bic.w	r2, r2, #4
 8003e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6999      	ldr	r1, [r3, #24]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	619a      	str	r2, [r3, #24]
      break;
 8003e36:	e064      	b.n	8003f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 fa28 	bl	8004294 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699a      	ldr	r2, [r3, #24]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699a      	ldr	r2, [r3, #24]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6999      	ldr	r1, [r3, #24]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	021a      	lsls	r2, r3, #8
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	619a      	str	r2, [r3, #24]
      break;
 8003e78:	e043      	b.n	8003f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68b9      	ldr	r1, [r7, #8]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 fa71 	bl	8004368 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	69da      	ldr	r2, [r3, #28]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f042 0208 	orr.w	r2, r2, #8
 8003e94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0204 	bic.w	r2, r2, #4
 8003ea4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69d9      	ldr	r1, [r3, #28]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	61da      	str	r2, [r3, #28]
      break;
 8003eb8:	e023      	b.n	8003f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68b9      	ldr	r1, [r7, #8]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 fabb 	bl	800443c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69da      	ldr	r2, [r3, #28]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69da      	ldr	r2, [r3, #28]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69d9      	ldr	r1, [r3, #28]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	021a      	lsls	r2, r3, #8
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	61da      	str	r2, [r3, #28]
      break;
 8003efa:	e002      	b.n	8003f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	75fb      	strb	r3, [r7, #23]
      break;
 8003f00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_TIM_ConfigClockSource+0x1c>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e0b4      	b.n	800409a <HAL_TIM_ConfigClockSource+0x186>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f68:	d03e      	beq.n	8003fe8 <HAL_TIM_ConfigClockSource+0xd4>
 8003f6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f6e:	f200 8087 	bhi.w	8004080 <HAL_TIM_ConfigClockSource+0x16c>
 8003f72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f76:	f000 8086 	beq.w	8004086 <HAL_TIM_ConfigClockSource+0x172>
 8003f7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f7e:	d87f      	bhi.n	8004080 <HAL_TIM_ConfigClockSource+0x16c>
 8003f80:	2b70      	cmp	r3, #112	@ 0x70
 8003f82:	d01a      	beq.n	8003fba <HAL_TIM_ConfigClockSource+0xa6>
 8003f84:	2b70      	cmp	r3, #112	@ 0x70
 8003f86:	d87b      	bhi.n	8004080 <HAL_TIM_ConfigClockSource+0x16c>
 8003f88:	2b60      	cmp	r3, #96	@ 0x60
 8003f8a:	d050      	beq.n	800402e <HAL_TIM_ConfigClockSource+0x11a>
 8003f8c:	2b60      	cmp	r3, #96	@ 0x60
 8003f8e:	d877      	bhi.n	8004080 <HAL_TIM_ConfigClockSource+0x16c>
 8003f90:	2b50      	cmp	r3, #80	@ 0x50
 8003f92:	d03c      	beq.n	800400e <HAL_TIM_ConfigClockSource+0xfa>
 8003f94:	2b50      	cmp	r3, #80	@ 0x50
 8003f96:	d873      	bhi.n	8004080 <HAL_TIM_ConfigClockSource+0x16c>
 8003f98:	2b40      	cmp	r3, #64	@ 0x40
 8003f9a:	d058      	beq.n	800404e <HAL_TIM_ConfigClockSource+0x13a>
 8003f9c:	2b40      	cmp	r3, #64	@ 0x40
 8003f9e:	d86f      	bhi.n	8004080 <HAL_TIM_ConfigClockSource+0x16c>
 8003fa0:	2b30      	cmp	r3, #48	@ 0x30
 8003fa2:	d064      	beq.n	800406e <HAL_TIM_ConfigClockSource+0x15a>
 8003fa4:	2b30      	cmp	r3, #48	@ 0x30
 8003fa6:	d86b      	bhi.n	8004080 <HAL_TIM_ConfigClockSource+0x16c>
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	d060      	beq.n	800406e <HAL_TIM_ConfigClockSource+0x15a>
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	d867      	bhi.n	8004080 <HAL_TIM_ConfigClockSource+0x16c>
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d05c      	beq.n	800406e <HAL_TIM_ConfigClockSource+0x15a>
 8003fb4:	2b10      	cmp	r3, #16
 8003fb6:	d05a      	beq.n	800406e <HAL_TIM_ConfigClockSource+0x15a>
 8003fb8:	e062      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fca:	f000 fafc 	bl	80045c6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003fdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	609a      	str	r2, [r3, #8]
      break;
 8003fe6:	e04f      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ff8:	f000 fae5 	bl	80045c6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800400a:	609a      	str	r2, [r3, #8]
      break;
 800400c:	e03c      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800401a:	461a      	mov	r2, r3
 800401c:	f000 fa5c 	bl	80044d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2150      	movs	r1, #80	@ 0x50
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fab3 	bl	8004592 <TIM_ITRx_SetConfig>
      break;
 800402c:	e02c      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800403a:	461a      	mov	r2, r3
 800403c:	f000 fa7a 	bl	8004534 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2160      	movs	r1, #96	@ 0x60
 8004046:	4618      	mov	r0, r3
 8004048:	f000 faa3 	bl	8004592 <TIM_ITRx_SetConfig>
      break;
 800404c:	e01c      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800405a:	461a      	mov	r2, r3
 800405c:	f000 fa3c 	bl	80044d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2140      	movs	r1, #64	@ 0x40
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fa93 	bl	8004592 <TIM_ITRx_SetConfig>
      break;
 800406c:	e00c      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4619      	mov	r1, r3
 8004078:	4610      	mov	r0, r2
 800407a:	f000 fa8a 	bl	8004592 <TIM_ITRx_SetConfig>
      break;
 800407e:	e003      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	73fb      	strb	r3, [r7, #15]
      break;
 8004084:	e000      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004086:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004098:	7bfb      	ldrb	r3, [r7, #15]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr

080040c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr

080040d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr
	...

080040ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a2f      	ldr	r2, [pc, #188]	@ (80041bc <TIM_Base_SetConfig+0xd0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00b      	beq.n	800411c <TIM_Base_SetConfig+0x30>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800410a:	d007      	beq.n	800411c <TIM_Base_SetConfig+0x30>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a2c      	ldr	r2, [pc, #176]	@ (80041c0 <TIM_Base_SetConfig+0xd4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d003      	beq.n	800411c <TIM_Base_SetConfig+0x30>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a2b      	ldr	r2, [pc, #172]	@ (80041c4 <TIM_Base_SetConfig+0xd8>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d108      	bne.n	800412e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a22      	ldr	r2, [pc, #136]	@ (80041bc <TIM_Base_SetConfig+0xd0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d00b      	beq.n	800414e <TIM_Base_SetConfig+0x62>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800413c:	d007      	beq.n	800414e <TIM_Base_SetConfig+0x62>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a1f      	ldr	r2, [pc, #124]	@ (80041c0 <TIM_Base_SetConfig+0xd4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d003      	beq.n	800414e <TIM_Base_SetConfig+0x62>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a1e      	ldr	r2, [pc, #120]	@ (80041c4 <TIM_Base_SetConfig+0xd8>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d108      	bne.n	8004160 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a0d      	ldr	r2, [pc, #52]	@ (80041bc <TIM_Base_SetConfig+0xd0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d103      	bne.n	8004194 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	691a      	ldr	r2, [r3, #16]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d005      	beq.n	80041b2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f023 0201 	bic.w	r2, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	611a      	str	r2, [r3, #16]
  }
}
 80041b2:	bf00      	nop
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr
 80041bc:	40012c00 	.word	0x40012c00
 80041c0:	40000400 	.word	0x40000400
 80041c4:	40000800 	.word	0x40000800

080041c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	f023 0201 	bic.w	r2, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0303 	bic.w	r3, r3, #3
 80041fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f023 0302 	bic.w	r3, r3, #2
 8004210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4313      	orrs	r3, r2
 800421a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a1c      	ldr	r2, [pc, #112]	@ (8004290 <TIM_OC1_SetConfig+0xc8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d10c      	bne.n	800423e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f023 0308 	bic.w	r3, r3, #8
 800422a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f023 0304 	bic.w	r3, r3, #4
 800423c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a13      	ldr	r2, [pc, #76]	@ (8004290 <TIM_OC1_SetConfig+0xc8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d111      	bne.n	800426a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800424c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	621a      	str	r2, [r3, #32]
}
 8004284:	bf00      	nop
 8004286:	371c      	adds	r7, #28
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40012c00 	.word	0x40012c00

08004294 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	f023 0210 	bic.w	r2, r3, #16
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	021b      	lsls	r3, r3, #8
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f023 0320 	bic.w	r3, r3, #32
 80042de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a1d      	ldr	r2, [pc, #116]	@ (8004364 <TIM_OC2_SetConfig+0xd0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d10d      	bne.n	8004310 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800430e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a14      	ldr	r2, [pc, #80]	@ (8004364 <TIM_OC2_SetConfig+0xd0>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d113      	bne.n	8004340 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800431e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004326:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	4313      	orrs	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	621a      	str	r2, [r3, #32]
}
 800435a:	bf00      	nop
 800435c:	371c      	adds	r7, #28
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr
 8004364:	40012c00 	.word	0x40012c00

08004368 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0303 	bic.w	r3, r3, #3
 800439e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	021b      	lsls	r3, r3, #8
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004438 <TIM_OC3_SetConfig+0xd0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d10d      	bne.n	80043e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a14      	ldr	r2, [pc, #80]	@ (8004438 <TIM_OC3_SetConfig+0xd0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d113      	bne.n	8004412 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	4313      	orrs	r3, r2
 8004404:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	621a      	str	r2, [r3, #32]
}
 800442c:	bf00      	nop
 800442e:	371c      	adds	r7, #28
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40012c00 	.word	0x40012c00

0800443c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800446a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	021b      	lsls	r3, r3, #8
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	031b      	lsls	r3, r3, #12
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4313      	orrs	r3, r2
 8004492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a0f      	ldr	r2, [pc, #60]	@ (80044d4 <TIM_OC4_SetConfig+0x98>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d109      	bne.n	80044b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	019b      	lsls	r3, r3, #6
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	621a      	str	r2, [r3, #32]
}
 80044ca:	bf00      	nop
 80044cc:	371c      	adds	r7, #28
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr
 80044d4:	40012c00 	.word	0x40012c00

080044d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	f023 0201 	bic.w	r2, r3, #1
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4313      	orrs	r3, r2
 800450c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f023 030a 	bic.w	r3, r3, #10
 8004514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4313      	orrs	r3, r2
 800451c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr

08004534 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	f023 0210 	bic.w	r2, r3, #16
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800455e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	031b      	lsls	r3, r3, #12
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004570:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	621a      	str	r2, [r3, #32]
}
 8004588:	bf00      	nop
 800458a:	371c      	adds	r7, #28
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr

08004592 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004592:	b480      	push	{r7}
 8004594:	b085      	sub	sp, #20
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f043 0307 	orr.w	r3, r3, #7
 80045b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	609a      	str	r2, [r3, #8]
}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bc80      	pop	{r7}
 80045c4:	4770      	bx	lr

080045c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b087      	sub	sp, #28
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	607a      	str	r2, [r7, #4]
 80045d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	021a      	lsls	r2, r3, #8
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	431a      	orrs	r2, r3
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	609a      	str	r2, [r3, #8]
}
 80045fa:	bf00      	nop
 80045fc:	371c      	adds	r7, #28
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr

08004604 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f003 031f 	and.w	r3, r3, #31
 8004616:	2201      	movs	r2, #1
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a1a      	ldr	r2, [r3, #32]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	43db      	mvns	r3, r3
 8004626:	401a      	ands	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a1a      	ldr	r2, [r3, #32]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f003 031f 	and.w	r3, r3, #31
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	fa01 f303 	lsl.w	r3, r1, r3
 800463c:	431a      	orrs	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	621a      	str	r2, [r3, #32]
}
 8004642:	bf00      	nop
 8004644:	371c      	adds	r7, #28
 8004646:	46bd      	mov	sp, r7
 8004648:	bc80      	pop	{r7}
 800464a:	4770      	bx	lr

0800464c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004660:	2302      	movs	r3, #2
 8004662:	e046      	b.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800468a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a16      	ldr	r2, [pc, #88]	@ (80046fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00e      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046b0:	d009      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a12      	ldr	r2, [pc, #72]	@ (8004700 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d004      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a10      	ldr	r2, [pc, #64]	@ (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d10c      	bne.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr
 80046fc:	40012c00 	.word	0x40012c00
 8004700:	40000400 	.word	0x40000400
 8004704:	40000800 	.word	0x40000800

08004708 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004720:	2302      	movs	r3, #2
 8004722:	e03d      	b.n	80047a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	4313      	orrs	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4313      	orrs	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	4313      	orrs	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bc80      	pop	{r7}
 80047a8:	4770      	bx	lr

080047aa <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bc80      	pop	{r7}
 80047ba:	4770      	bx	lr

080047bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr

080047ce <memset>:
 80047ce:	4603      	mov	r3, r0
 80047d0:	4402      	add	r2, r0
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d100      	bne.n	80047d8 <memset+0xa>
 80047d6:	4770      	bx	lr
 80047d8:	f803 1b01 	strb.w	r1, [r3], #1
 80047dc:	e7f9      	b.n	80047d2 <memset+0x4>
	...

080047e0 <__libc_init_array>:
 80047e0:	b570      	push	{r4, r5, r6, lr}
 80047e2:	2600      	movs	r6, #0
 80047e4:	4d0c      	ldr	r5, [pc, #48]	@ (8004818 <__libc_init_array+0x38>)
 80047e6:	4c0d      	ldr	r4, [pc, #52]	@ (800481c <__libc_init_array+0x3c>)
 80047e8:	1b64      	subs	r4, r4, r5
 80047ea:	10a4      	asrs	r4, r4, #2
 80047ec:	42a6      	cmp	r6, r4
 80047ee:	d109      	bne.n	8004804 <__libc_init_array+0x24>
 80047f0:	f000 f81a 	bl	8004828 <_init>
 80047f4:	2600      	movs	r6, #0
 80047f6:	4d0a      	ldr	r5, [pc, #40]	@ (8004820 <__libc_init_array+0x40>)
 80047f8:	4c0a      	ldr	r4, [pc, #40]	@ (8004824 <__libc_init_array+0x44>)
 80047fa:	1b64      	subs	r4, r4, r5
 80047fc:	10a4      	asrs	r4, r4, #2
 80047fe:	42a6      	cmp	r6, r4
 8004800:	d105      	bne.n	800480e <__libc_init_array+0x2e>
 8004802:	bd70      	pop	{r4, r5, r6, pc}
 8004804:	f855 3b04 	ldr.w	r3, [r5], #4
 8004808:	4798      	blx	r3
 800480a:	3601      	adds	r6, #1
 800480c:	e7ee      	b.n	80047ec <__libc_init_array+0xc>
 800480e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004812:	4798      	blx	r3
 8004814:	3601      	adds	r6, #1
 8004816:	e7f2      	b.n	80047fe <__libc_init_array+0x1e>
 8004818:	08004864 	.word	0x08004864
 800481c:	08004864 	.word	0x08004864
 8004820:	08004864 	.word	0x08004864
 8004824:	08004868 	.word	0x08004868

08004828 <_init>:
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482a:	bf00      	nop
 800482c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482e:	bc08      	pop	{r3}
 8004830:	469e      	mov	lr, r3
 8004832:	4770      	bx	lr

08004834 <_fini>:
 8004834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004836:	bf00      	nop
 8004838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483a:	bc08      	pop	{r3}
 800483c:	469e      	mov	lr, r3
 800483e:	4770      	bx	lr
